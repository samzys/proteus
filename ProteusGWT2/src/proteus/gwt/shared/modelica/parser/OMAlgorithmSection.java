/* Generated By:JJTree: Do not edit this line. OMAlgorithmSection.java */

package proteus.gwt.shared.modelica.parser;

import java.util.LinkedList;
import java.util.List;

public class OMAlgorithmSection extends SimpleNode {

	public boolean initial;

	public List<OMStatement> statements = new LinkedList<OMStatement>();

	public List<OMAnnotation> annotations = new LinkedList<OMAnnotation>();

	public OMAlgorithmSection(int id) {
		super(id);
	}

	public OMAlgorithmSection(ModelicaParser p, int id) {
		super(p, id);
	}

	/** Accept the visitor. * */
	@Override
	public Object jjtAccept(ModelicaParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	@Override
	public String toCode() {
		StringBuilder sb = new StringBuilder();
		if (initial) {
			sb.append("initial ");
		}
		sb.append("algorithm\n");
		for (OMStatement s : statements) {
			sb.append(s.toCode() + ";\n");
		}
		for (OMAnnotation a : annotations) {
			sb.append(a.toCode() + ";\n");
		}
		return sb.toString();
	}
	//	
	// public OMAlgorithmSection copy() {
	// OMAlgorithmSection copy = new OMAlgorithmSection(parser, id);
	// copy.initial = initial;
	// for (OMStatement s : statements) {
	// copy.statements.add(s.copy());
	// }
	// for (OMAnnotation a : annotations) {
	// copy.annotations.add(a.copy());
	// }
	// return copy;
	// }
}
