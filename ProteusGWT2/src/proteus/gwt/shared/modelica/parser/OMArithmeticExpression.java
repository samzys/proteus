/* Generated By:JJTree: Do not edit this line. OMArithmeticExpression.java */

package proteus.gwt.shared.modelica.parser;

import java.util.LinkedList;
import java.util.List;

public class OMArithmeticExpression extends SimpleNode {

	public String prefixOp;
	
	public OMTerm term;

	public List<String> addOps = new LinkedList<String>();

	public List<OMTerm> rhsTerms = new LinkedList<OMTerm>();

	public OMArithmeticExpression(int id) {
		super(id);
	}

	public OMArithmeticExpression(ModelicaParser p, int id) {
		super(p, id);
	}

	/** Accept the visitor. * */
	@Override
	public Object jjtAccept(ModelicaParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	@Override
	public String toCode() {
		StringBuilder sb = new StringBuilder();
		if (prefixOp != null) {
			sb.append(prefixOp);
		}
		sb.append(term.toCode());
		int i = 0;
		for (String op : addOps) {
			sb.append(" " + op + " ");
			sb.append(rhsTerms.get(i++).toCode());
		}
		return sb.toString();
	}
	//	
	// public OMArithmeticExpression copy() {
	// OMArithmeticExpression copy = new OMArithmeticExpression(parser, id);
	// copy.prefixOp = prefixOp;
	// copy.term = term.copy();
	// for (String op : addOps) {
	// copy.addOps.add(op);
	// }
	// for (OMTerm t : rhsTerms) {
	// copy.rhsTerms.add(t.copy());
	// }
	// return copy;
	// }
}
