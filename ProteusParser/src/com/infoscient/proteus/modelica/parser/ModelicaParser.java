/* Generated By:JJTree&JavaCC: Do not edit this line. ModelicaParser.java */
package com.infoscient.proteus.modelica.parser;
import java.util.List;
import java.util.LinkedList;
import java.util.Arrays;
public class ModelicaParser/*@bgen(jjtree)*/implements ModelicaParserTreeConstants, ModelicaParserConstants {/*@bgen(jjtree)*/
  protected JJTModelicaParserState jjtree = new JJTModelicaParserState();public static void main(String[]args)throws ParseException, TokenMgrError{
    ModelicaParser parser = new ModelicaParser(System.in);
    SimpleNode root = parser.stored_definition();
    root.dump("");
  }

/********************************************************************************                       Stored Definition - Within********************************************************************************/
  final public OMStoredDefinition stored_definition() throws ParseException {
                                                         /*@bgen(jjtree) StoredDefinition */
  OMStoredDefinition jjtn000 = new OMStoredDefinition(JJTSTOREDDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean final_ = false;
  String s;
  OMClassDefinition clsdef;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITHIN:
        jj_consume_token(WITHIN);
    jjtn000.within = true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          s = name();
    jjtn000.name = s;
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        jj_consume_token(83);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BLOCK:
        case CLASS:
        case CONNECTOR:
        case ENCAPSULATED:
        case EXPANDABLE:
        case FINAL:
        case FUNCTION:
        case MODEL:
        case PACKAGE:
        case PARTIAL:
        case RECORD:
        case TYPE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
          jj_consume_token(FINAL);
    final_ = true;
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        clsdef = class_definition();
    clsdef.final_ = final_;
    jjtn000.classDefinitions.add(clsdef);
        jj_consume_token(83);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/********************************************************************************                             Class Definition********************************************************************************/
  final public OMClassDefinition class_definition() throws ParseException {
                                                      /*@bgen(jjtree) ClassDefinition */
  OMClassDefinition jjtn000 = new OMClassDefinition(JJTCLASSDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token opt = null, t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ENCAPSULATED:
        jj_consume_token(ENCAPSULATED);
    jjtn000.encapsulated = true;
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARTIAL:
        jj_consume_token(PARTIAL);
    jjtn000.partial = true;
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        t = jj_consume_token(CLASS);
        break;
      case MODEL:
        t = jj_consume_token(MODEL);
        break;
      case RECORD:
        t = jj_consume_token(RECORD);
        break;
      case BLOCK:
        t = jj_consume_token(BLOCK);
        break;
      case CONNECTOR:
      case EXPANDABLE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXPANDABLE:
          opt = jj_consume_token(EXPANDABLE);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        t = jj_consume_token(CONNECTOR);
        break;
      case TYPE:
        t = jj_consume_token(TYPE);
        break;
      case PACKAGE:
        t = jj_consume_token(PACKAGE);
        break;
      case FUNCTION:
        t = jj_consume_token(FUNCTION);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtn000.restriction = (opt != null?opt.image:"")+t.image;
      jjtn000.classSpecifier = class_specifier();
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMClassSpecifier class_specifier() throws ParseException {
                                                   /*@bgen(jjtree) ClassSpecifier */
  OMClassSpecifier jjtn000 = new OMClassSpecifier(JJTCLASSSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_1(2)) {
        t = jj_consume_token(IDENT);
    jjtn000.name = t.image;
        jjtn000.description = string_comment();
        jjtn000.composition = composition();
        jj_consume_token(END);
        jj_consume_token(IDENT);
    jjtn000.endTag = true;
        jjtn000.selection = 0;
      } else if (jj_2_2(3)) {
        t = jj_consume_token(IDENT);
    jjtn000.name = t.image;
        jjtn000.selection = 1;
        jj_consume_token(84);
        jjtn000.typePrefix = base_prefix();
        jjtn000.refName = name();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 93:
          jjtn000.arraySubs = array_subscripts();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 85:
          jjtn000.classModification = class_modification();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
        jjtn000.comment = comment();
      } else if (jj_2_3(3)) {
        t = jj_consume_token(IDENT);
        jjtn000.selection = 2;
    jjtn000.name = t.image;
        jj_consume_token(84);
        jj_consume_token(ENUMERATION);
        jj_consume_token(85);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
        case 86:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            jjtn000.omEnumlist = enum_list();
            break;
          case 86:
            jj_consume_token(86);
        jjtn000.allTag = true;
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        jj_consume_token(87);
        jjtn000.comment = comment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
        jjtn000.selection = 3;
    jjtn000.name = t.image;
          jj_consume_token(84);
          jj_consume_token(88);
          jj_consume_token(85);
          jjtn000.refName = name();
          jj_consume_token(89);
          jj_consume_token(IDENT);
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 89:
              ;
              break;
            default:
              jj_la1[12] = jj_gen;
              break label_2;
            }
            jj_consume_token(89);
            jj_consume_token(IDENT);
          }
          jj_consume_token(87);
          jjtn000.comment = comment();
          break;
        case EXTENDS:
          jj_consume_token(EXTENDS);
        jjtn000.selection = 4;
    jjtn000.extends_ = true;
          t = jj_consume_token(IDENT);
    jjtn000.name = t.image;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 85:
            jjtn000.classModification = class_modification();
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          jjtn000.description = string_comment();
          jjtn000.composition = composition();
          jj_consume_token(END);
          jj_consume_token(IDENT);
    jjtn000.endTag = true;
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMTypePrefix base_prefix() throws ParseException {
  OMTypePrefix t;
    t = type_prefix();
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public OMEnumList enum_list() throws ParseException {
                                 /*@bgen(jjtree) EnumList */
  OMEnumList jjtn000 = new OMEnumList(JJTENUMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMEnumLiteral el;
    try {
      el = enumeration_literal();
    jjtn000.enumList.add(el);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_3;
        }
        jj_consume_token(89);
        el = enumeration_literal();
    jjtn000.enumList.add(el);
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMEnumLiteral enumeration_literal() throws ParseException {
                                                 /*@bgen(jjtree) EnumLiteral */
  OMEnumLiteral jjtn000 = new OMEnumLiteral(JJTENUMLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENT);
    jjtn000.name = t.image;
      jjtn000.comment = comment();
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMComposition composition() throws ParseException {
                                         /*@bgen(jjtree) Composition */
 OMComposition jjtn000 = new OMComposition(JJTCOMPOSITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
  OMElementList el;
  OMEquationSection es;
  OMAlgorithmSection as;
    try {
      el = element_list();
    jjtn000.elementList = el;
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALGORITHM:
        case EQUATION:
        case INITIAL:
        case PROTECTED:
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          t = jj_consume_token(PUBLIC);
          el = element_list();
    jjtn000.publicElementLists.add(el);
          break;
        case PROTECTED:
          t = jj_consume_token(PROTECTED);
          el = element_list();
    jjtn000.protectedElementLists.add(el);
          break;
        default:
          jj_la1[17] = jj_gen;
          if (jj_2_4(2)) {
            es = equation_section();
    jjtn000.equationSections.add(es);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ALGORITHM:
            case INITIAL:
              as = algorithm_section();
    jjtn000.algorithmSections.add(as);
              break;
            default:
              jj_la1[18] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERNAL:
        jj_consume_token(EXTERNAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          language_specification();
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          external_function_call();
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANNOTATION:
          annotation();
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        jj_consume_token(83);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANNOTATION:
        jjtn000.annotation = annotation();
        jj_consume_token(83);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
                                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                  jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String language_specification() throws ParseException {
  Token t;
    t = jj_consume_token(STRING);
    {if (true) return t.image.substring(1, t.image.length()-1);}
    throw new Error("Missing return statement in function");
  }

  final public OMExternalFuncCall external_function_call() throws ParseException {
                                                              /*@bgen(jjtree) ExternalFuncCall */
  OMExternalFuncCall jjtn000 = new OMExternalFuncCall(JJTEXTERNALFUNCCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_5(2)) {
        jjtn000.componentRef = component_reference();
        jj_consume_token(84);
      } else {
        ;
      }
      t = jj_consume_token(IDENT);
    jjtn000.funcName = t.image;
      jj_consume_token(85);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END:
      case FALSE:
      case IF:
      case INITIAL:
      case NOT:
      case TRUE:
      case PLUS:
      case MINUS:
      case DOT_PLUS:
      case DOT_MINUS:
      case IDENT:
      case STRING:
      case UNSIGNED_INTEGER:
      case UNSIGNED_NUMBER:
      case 85:
      case 93:
      case 95:
      case 97:
        jjtn000.expList = expression_list();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(87);
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMElementList element_list() throws ParseException {
                                          /*@bgen(jjtree) ElementList */
  OMElementList jjtn000 = new OMElementList(JJTELEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMElement e;
  OMAnnotation a;
    try {
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANNOTATION:
        case BLOCK:
        case CLASS:
        case CONNECTOR:
        case CONSTANT:
        case DISCRETE:
        case ENCAPSULATED:
        case EXPANDABLE:
        case EXTENDS:
        case FINAL:
        case FLOW:
        case FUNCTION:
        case IMPORT:
        case INNER:
        case INPUT:
        case MODEL:
        case OUTER:
        case OUTPUT:
        case PACKAGE:
        case PARAMETER:
        case PARTIAL:
        case RECORD:
        case REDECLARE:
        case REPLACEABLE:
        case STREAM:
        case TYPE:
        case IDENT:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BLOCK:
        case CLASS:
        case CONNECTOR:
        case CONSTANT:
        case DISCRETE:
        case ENCAPSULATED:
        case EXPANDABLE:
        case EXTENDS:
        case FINAL:
        case FLOW:
        case FUNCTION:
        case IMPORT:
        case INNER:
        case INPUT:
        case MODEL:
        case OUTER:
        case OUTPUT:
        case PACKAGE:
        case PARAMETER:
        case PARTIAL:
        case RECORD:
        case REDECLARE:
        case REPLACEABLE:
        case STREAM:
        case TYPE:
        case IDENT:
          e = element();
    jjtn000.elements.add(e);
          jj_consume_token(83);
          break;
        case ANNOTATION:
          a = annotation();
    jjtn000.annotations.add(a);
          jj_consume_token(83);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMElement element() throws ParseException {
                             /*@bgen(jjtree) Element */
  OMElement jjtn000 = new OMElement(JJTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        jjtn000.importClause = import_clause();
        break;
      case EXTENDS:
        jjtn000.extendsClause = extends_clause();
        break;
      case BLOCK:
      case CLASS:
      case CONNECTOR:
      case CONSTANT:
      case DISCRETE:
      case ENCAPSULATED:
      case EXPANDABLE:
      case FINAL:
      case FLOW:
      case FUNCTION:
      case INNER:
      case INPUT:
      case MODEL:
      case OUTER:
      case OUTPUT:
      case PACKAGE:
      case PARAMETER:
      case PARTIAL:
      case RECORD:
      case REDECLARE:
      case REPLACEABLE:
      case STREAM:
      case TYPE:
      case IDENT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REDECLARE:
          jj_consume_token(REDECLARE);
    jjtn000.redeclare = true;
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL:
          jj_consume_token(FINAL);
    jjtn000.final_ = true;
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INNER:
          jj_consume_token(INNER);
    jjtn000.typing = "inner";
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUTER:
          jj_consume_token(OUTER);
    jjtn000.typing= "outer";
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BLOCK:
        case CLASS:
        case CONNECTOR:
        case CONSTANT:
        case DISCRETE:
        case ENCAPSULATED:
        case EXPANDABLE:
        case FLOW:
        case FUNCTION:
        case INPUT:
        case MODEL:
        case OUTPUT:
        case PACKAGE:
        case PARAMETER:
        case PARTIAL:
        case RECORD:
        case STREAM:
        case TYPE:
        case IDENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BLOCK:
          case CLASS:
          case CONNECTOR:
          case ENCAPSULATED:
          case EXPANDABLE:
          case FUNCTION:
          case MODEL:
          case PACKAGE:
          case PARTIAL:
          case RECORD:
          case TYPE:
            jjtn000.classDefinition = class_definition();
            break;
          case CONSTANT:
          case DISCRETE:
          case FLOW:
          case INPUT:
          case OUTPUT:
          case PARAMETER:
          case STREAM:
          case IDENT:
            jjtn000.componentClause = component_clause();
            break;
          default:
            jj_la1[31] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case REPLACEABLE:
          jj_consume_token(REPLACEABLE);
    jjtn000.replaceable = true;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BLOCK:
          case CLASS:
          case CONNECTOR:
          case ENCAPSULATED:
          case EXPANDABLE:
          case FUNCTION:
          case MODEL:
          case PACKAGE:
          case PARTIAL:
          case RECORD:
          case TYPE:
            jjtn000.classDefinition = class_definition();
            break;
          case CONSTANT:
          case DISCRETE:
          case FLOW:
          case INPUT:
          case OUTPUT:
          case PARAMETER:
          case STREAM:
          case IDENT:
            jjtn000.componentClause = component_clause();
            break;
          default:
            jj_la1[32] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONSTRAINEDBY:
            jjtn000.constrainingClause = constraining_clause();
            jjtn000.comment = comment();
            break;
          default:
            jj_la1[33] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                     jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMImportClause import_clause() throws ParseException {
                                             /*@bgen(jjtree) ImportClause */
  OMImportClause jjtn000 = new OMImportClause(JJTIMPORTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  String alias;
    try {
      jj_consume_token(IMPORT);
      if (jj_2_6(2)) {
        t = jj_consume_token(IDENT);
        jj_consume_token(84);
        jjtn000.name = name();
    jjtn000.alias = t.image;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jjtn000.name = name();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT_TIMES:
            jj_consume_token(DOT_TIMES);
    jjtn000.includeSub = true;
            break;
          default:
            jj_la1[36] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtn000.comment = comment();
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/********************************************************************************                                  Extends********************************************************************************/
  final public OMExtendsClause extends_clause() throws ParseException {
                                                /*@bgen(jjtree) ExtendsClause */
  OMExtendsClause jjtn000 = new OMExtendsClause(JJTEXTENDSCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EXTENDS);
      jjtn000.name = name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 85:
        jjtn000.classModification = class_modification();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANNOTATION:
        jjtn000.annotation = annotation();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
                                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                                           jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMConstrainingClause constraining_clause() throws ParseException {
                                                               /*@bgen(jjtree) ConstrainingClause */
  OMConstrainingClause jjtn000 = new OMConstrainingClause(JJTCONSTRAININGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONSTRAINEDBY);
      jjtn000.name = name();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 85:
        jjtn000.classModification = class_modification();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                             jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/********************************************************************************                             Component Clause********************************************************************************/
  final public OMComponentClause component_clause() throws ParseException {
                                                      /*@bgen(jjtree) ComponentClause */
  OMComponentClause jjtn000 = new OMComponentClause(JJTCOMPONENTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.typePrefix = type_prefix();
      jjtn000.typeName = type_specifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jjtn000.arraySubscripts = array_subscripts();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      jjtn000.componentList = component_list();
                                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMTypePrefix type_prefix() throws ParseException {
                                       /*@bgen(jjtree) TypePrefix */
  OMTypePrefix jjtn000 = new OMTypePrefix(JJTTYPEPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOW:
      case STREAM:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FLOW:
          jj_consume_token(FLOW);
    jjtn000.flow_stream = "flow";
          break;
        case STREAM:
          jj_consume_token(STREAM);
    jjtn000.flow_stream = "stream";
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
      case DISCRETE:
      case PARAMETER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DISCRETE:
          jj_consume_token(DISCRETE);
    jjtn000.variability = "discrete";
          break;
        case PARAMETER:
          jj_consume_token(PARAMETER);
    jjtn000.variability = "parameter";
          break;
        case CONSTANT:
          jj_consume_token(CONSTANT);
    jjtn000.variability = "constant";
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INPUT:
      case OUTPUT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INPUT:
          jj_consume_token(INPUT);
    jjtn000.causality = "input";
          break;
        case OUTPUT:
          jj_consume_token(OUTPUT);
    jjtn000.causality = "output";
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    {if (true) return jjtn000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public String type_specifier() throws ParseException {
  String n;
    n = name();
    {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public OMComponentList component_list() throws ParseException {
                                                /*@bgen(jjtree) ComponentList */
  OMComponentList jjtn000 = new OMComponentList(JJTCOMPONENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMComponentDecl cd;
    try {
      cd = component_declaration();
    jjtn000.componentDecls.add(cd);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_6;
        }
        jj_consume_token(89);
        cd = component_declaration();
    jjtn000.componentDecls.add(cd);
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMComponentDecl component_declaration() throws ParseException {
                                                       /*@bgen(jjtree) ComponentDecl */
  OMComponentDecl jjtn000 = new OMComponentDecl(JJTCOMPONENTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.decl = declaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        jjtn000.condAttr = conditional_attribute();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      jjtn000.comment = comment();
                                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                                          jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMCondAttr conditional_attribute() throws ParseException {
                                             /*@bgen(jjtree) CondAttr */
  OMCondAttr jjtn000 = new OMCondAttr(JJTCONDATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jjtn000.expression = expression();
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMDeclaration declaration() throws ParseException {
                                         /*@bgen(jjtree) Declaration */
  OMDeclaration jjtn000 = new OMDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENT);
    jjtn000.name = t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jjtn000.arraySubscripts = array_subscripts();
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 84:
      case 85:
      case 90:
        jjtn000.modification = modification();
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                            jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/********************************************************************************                               Modification********************************************************************************/
  final public OMModification modification() throws ParseException {
                                            /*@bgen(jjtree) Modification */
  OMModification jjtn000 = new OMModification(JJTMODIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 85:
        jjtn000.classModification = class_modification();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 84:
          jj_consume_token(84);
    jjtn000.eqType = "=";
          jjtn000.expression = expression();
          break;
        default:
          jj_la1[52] = jj_gen;
          ;
        }
        break;
      case 84:
        jj_consume_token(84);
    jjtn000.eqType = "=";
        jjtn000.expression = expression();
        break;
      case 90:
        jj_consume_token(90);
    jjtn000.eqType = ":=";
        jjtn000.expression = expression();
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMClassModification class_modification() throws ParseException {
                                                            /*@bgen(jjtree) ClassModification */
  OMClassModification jjtn000 = new OMClassModification(JJTCLASSMODIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(85);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EACH:
      case FINAL:
      case REDECLARE:
      case REPLACEABLE:
      case IDENT:
        jjtn000.argList = argument_list();
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      jj_consume_token(87);
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMArgumentList argument_list() throws ParseException {
                                             /*@bgen(jjtree) ArgumentList */
  OMArgumentList jjtn000 = new OMArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMArgument arg;
    try {
      arg = argument();
    jjtn000.argList.add(arg);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_7;
        }
        jj_consume_token(89);
        arg = argument();
    jjtn000.argList.add(arg);
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMArgument argument() throws ParseException {
                                /*@bgen(jjtree) Argument */
  OMArgument jjtn000 = new OMArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EACH:
      case FINAL:
      case REPLACEABLE:
      case IDENT:
        jjtn000.elementModificationOrReplaceable = element_modification_or_replaceable();
        break;
      case REDECLARE:
        jjtn000.elementRedeclaration = element_redeclaration();
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMElementModificationOrReplaceable element_modification_or_replaceable() throws ParseException {
                                                                                                           /*@bgen(jjtree) ElementModificationOrReplaceable */
  OMElementModificationOrReplaceable jjtn000 = new OMElementModificationOrReplaceable(JJTELEMENTMODIFICATIONORREPLACEABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EACH:
        jj_consume_token(EACH);
    jjtn000.each = true;
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
    jjtn000.final_ = true;
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        jjtn000.elementModification = element_modification();
        break;
      case REPLACEABLE:
        jjtn000.elementReplaceable = element_replaceable();
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMElementModification element_modification() throws ParseException {
                                                                  /*@bgen(jjtree) ElementModification */
  OMElementModification jjtn000 = new OMElementModification(JJTELEMENTMODIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.componentRef = component_reference();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 84:
      case 85:
      case 90:
        jjtn000.modification = modification();
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      jjtn000.stringComment = string_comment();
                                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                  jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMElementRedeclaration element_redeclaration() throws ParseException {
                                                                     /*@bgen(jjtree) ElementRedeclaration */
  OMElementRedeclaration jjtn000 = new OMElementRedeclaration(JJTELEMENTREDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REDECLARE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EACH:
        jj_consume_token(EACH);
    jjtn000.each = true;
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
    jjtn000.final_ = true;
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BLOCK:
      case CLASS:
      case CONNECTOR:
      case CONSTANT:
      case DISCRETE:
      case ENCAPSULATED:
      case EXPANDABLE:
      case FLOW:
      case FUNCTION:
      case INPUT:
      case MODEL:
      case OUTPUT:
      case PACKAGE:
      case PARAMETER:
      case PARTIAL:
      case RECORD:
      case STREAM:
      case TYPE:
      case IDENT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BLOCK:
        case CLASS:
        case CONNECTOR:
        case ENCAPSULATED:
        case EXPANDABLE:
        case FUNCTION:
        case MODEL:
        case PACKAGE:
        case PARTIAL:
        case RECORD:
        case TYPE:
          jjtn000.classDefinition = class_definition();
          break;
        case CONSTANT:
        case DISCRETE:
        case FLOW:
        case INPUT:
        case OUTPUT:
        case PARAMETER:
        case STREAM:
        case IDENT:
          jjtn000.componentClause1 = component_clause1();
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case REPLACEABLE:
        jjtn000.elementReplaceable = element_replaceable();
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMElementReplaceable element_replaceable() throws ParseException {
                                                               /*@bgen(jjtree) ElementReplaceable */
  OMElementReplaceable jjtn000 = new OMElementReplaceable(JJTELEMENTREPLACEABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REPLACEABLE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BLOCK:
      case CLASS:
      case CONNECTOR:
      case ENCAPSULATED:
      case EXPANDABLE:
      case FUNCTION:
      case MODEL:
      case PACKAGE:
      case PARTIAL:
      case RECORD:
      case TYPE:
        jjtn000.classDefinition = class_definition();
        break;
      case CONSTANT:
      case DISCRETE:
      case FLOW:
      case INPUT:
      case OUTPUT:
      case PARAMETER:
      case STREAM:
      case IDENT:
        jjtn000.componentClause1 = component_clause1();
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRAINEDBY:
        jjtn000.constrainingClause = constraining_clause();
        break;
      default:
        jj_la1[66] = jj_gen;
        ;
      }
                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                           jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMComponentClause1 component_clause1() throws ParseException {
                                                         /*@bgen(jjtree) ComponentClause1 */
  OMComponentClause1 jjtn000 = new OMComponentClause1(JJTCOMPONENTCLAUSE1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.typePrefix = type_prefix();
      jjtn000.typeName = type_specifier();
      jjtn000.componentDecl1 = component_declaration1();
                                                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                                                            jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMComponentDecl1 component_declaration1() throws ParseException {
                                                          /*@bgen(jjtree) ComponentDecl1 */
  OMComponentDecl1 jjtn000 = new OMComponentDecl1(JJTCOMPONENTDECL1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.decl = declaration();
      jjtn000.comment = comment();
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/********************************************************************************                                 Equations********************************************************************************/
  final public OMEquationSection equation_section() throws ParseException {
                                                      /*@bgen(jjtree) EquationSection */
  OMEquationSection jjtn000 = new OMEquationSection(JJTEQUATIONSECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMEquation e;
  OMAnnotation a;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INITIAL:
        jj_consume_token(INITIAL);
    jjtn000.initial = true;
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      jj_consume_token(EQUATION);
      label_8:
      while (true) {
        if (jj_2_7(2147483647)) {
          ;
        } else {
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONNECT:
        case END:
        case FALSE:
        case FOR:
        case IF:
        case INITIAL:
        case NOT:
        case TRUE:
        case WHEN:
        case PLUS:
        case MINUS:
        case DOT_PLUS:
        case DOT_MINUS:
        case IDENT:
        case STRING:
        case UNSIGNED_INTEGER:
        case UNSIGNED_NUMBER:
        case 85:
        case 93:
        case 95:
        case 97:
          e = equation();
    jjtn000.equations.add(e);
          jj_consume_token(83);
          break;
        case ANNOTATION:
          a = annotation();
    jjtn000.annotations.add(a);
          jj_consume_token(83);
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMAlgorithmSection algorithm_section() throws ParseException {
                                                         /*@bgen(jjtree) AlgorithmSection */
  OMAlgorithmSection jjtn000 = new OMAlgorithmSection(JJTALGORITHMSECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMStatement s;
  OMAnnotation a;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INITIAL:
        jj_consume_token(INITIAL);
    jjtn000.initial = true;
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      jj_consume_token(ALGORITHM);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANNOTATION:
        case BREAK:
        case FOR:
        case IF:
        case RETURN:
        case WHEN:
        case WHILE:
        case IDENT:
        case 85:
          ;
          break;
        default:
          jj_la1[70] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case FOR:
        case IF:
        case RETURN:
        case WHEN:
        case WHILE:
        case IDENT:
        case 85:
          s = statement();
    jjtn000.statements.add(s);
          jj_consume_token(83);
          break;
        case ANNOTATION:
          a = annotation();
    jjtn000.annotations.add(a);
          jj_consume_token(83);
          break;
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMEquation equation() throws ParseException {
                                /*@bgen(jjtree) Equation */
  OMEquation jjtn000 = new OMEquation(JJTEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_8(2147483647)) {
        jjtn000.lhsExpression = simple_expression();
        jj_consume_token(84);
        jjtn000.rhsExpression = expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          jjtn000.ifEquation = if_equation();
          break;
        case FOR:
          jjtn000.forEquation = for_equation();
          break;
        case CONNECT:
          jjtn000.connectClause = connect_clause();
          break;
        case WHEN:
          jjtn000.whenEquation = when_equation();
          break;
        case IDENT:
          jjtn000.componentRef = component_reference();
          jjtn000.funcCallArgs = function_call_args();
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtn000.comment = comment();
                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMStatement statement() throws ParseException {
                                   /*@bgen(jjtree) Statement */
  OMStatement jjtn000 = new OMStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        jjtn000.componentRef = component_reference();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 90:
          jj_consume_token(90);
          jjtn000.expression = expression();
          break;
        case 85:
          jjtn000.funcCallArgs = function_call_args();
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case 85:
        jj_consume_token(85);
        jjtn000.outputExpressionList = output_expression_list();
        jj_consume_token(87);
        jj_consume_token(90);
        jjtn000.componentRef = component_reference();
        jjtn000.funcCallArgs = function_call_args();
        break;
      case BREAK:
        jj_consume_token(BREAK);
    jjtn000.break_ = true;
        break;
      case RETURN:
        jj_consume_token(RETURN);
    jjtn000.return_ = true;
        break;
      case IF:
        jjtn000.ifStatement = if_statement();
        break;
      case FOR:
        jjtn000.forStatement = for_statement();
        break;
      case WHILE:
        jjtn000.whileStatement = while_statement();
        break;
      case WHEN:
        jjtn000.whenStatement = when_statement();
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtn000.comment = comment();
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMIfEquation if_equation() throws ParseException {
                                       /*@bgen(jjtree) IfEquation */
  OMIfEquation jjtn000 = new OMIfEquation(JJTIFEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMExpression exp;
  OMEquation e;
  List<OMEquation>list;
    try {
      jj_consume_token(IF);
      exp = expression();
    jjtn000.ifExpression = exp;
      jj_consume_token(THEN);
      label_10:
      while (true) {
        if (jj_2_9(2)) {
          ;
        } else {
          break label_10;
        }
        e = equation();
    jjtn000.ifEquations.add(e);
        jj_consume_token(83);
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_11;
        }
        jj_consume_token(ELSEIF);
        exp = expression();
    jjtn000.elseIfExpressions.add(exp);
    jjtn000.elseIfEquationsList.add(list = new LinkedList<OMEquation>());
        jj_consume_token(THEN);
        label_12:
        while (true) {
          if (jj_2_10(2)) {
            ;
          } else {
            break label_12;
          }
          e = equation();
    list.add(e);
          jj_consume_token(83);
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
    jjtn000.else_ = true;
        label_13:
        while (true) {
          if (jj_2_11(2)) {
            ;
          } else {
            break label_13;
          }
          e = equation();
    jjtn000.elseEquations.add(e);
          jj_consume_token(83);
        }
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      jj_consume_token(END);
      jj_consume_token(IF);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMIfStatement if_statement() throws ParseException {
                                          /*@bgen(jjtree) IfStatement */
  OMIfStatement jjtn000 = new OMIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMExpression exp;
  OMStatement s;
  List<OMStatement>list;
    try {
      jj_consume_token(IF);
      exp = expression();
    jjtn000.ifExpression = exp;
      jj_consume_token(THEN);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case FOR:
        case IF:
        case RETURN:
        case WHEN:
        case WHILE:
        case IDENT:
        case 85:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_14;
        }
        s = statement();
    jjtn000.ifStatements.add(s);
        jj_consume_token(83);
      }
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEIF:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_15;
        }
        jj_consume_token(ELSEIF);
        exp = expression();
    jjtn000.elseIfExpressions.add(exp);
    jjtn000.elseIfStatementsList.add(list = new LinkedList<OMStatement>());
        jj_consume_token(THEN);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BREAK:
          case FOR:
          case IF:
          case RETURN:
          case WHEN:
          case WHILE:
          case IDENT:
          case 85:
            ;
            break;
          default:
            jj_la1[79] = jj_gen;
            break label_16;
          }
          s = statement();
    list.add(s);
          jj_consume_token(83);
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
    jjtn000.else_ = true;
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BREAK:
          case FOR:
          case IF:
          case RETURN:
          case WHEN:
          case WHILE:
          case IDENT:
          case 85:
            ;
            break;
          default:
            jj_la1[80] = jj_gen;
            break label_17;
          }
          s = statement();
    jjtn000.elseStatements.add(s);
          jj_consume_token(83);
        }
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      jj_consume_token(END);
      jj_consume_token(IF);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMForEquation for_equation() throws ParseException {
                                          /*@bgen(jjtree) ForEquation */
  OMForEquation jjtn000 = new OMForEquation(JJTFOREQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMEquation e;
    try {
      jj_consume_token(FOR);
      jjtn000.forIndices = for_indices();
      jj_consume_token(LOOP);
      label_18:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_18;
        }
        e = equation();
    jjtn000.equations.add(e);
        jj_consume_token(83);
      }
      jj_consume_token(END);
      jj_consume_token(FOR);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMForStatement for_statement() throws ParseException {
                                             /*@bgen(jjtree) ForStatement */
  OMForStatement jjtn000 = new OMForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMStatement s;
    try {
      jj_consume_token(FOR);
      jjtn000.forIndices = for_indices();
      jj_consume_token(LOOP);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case FOR:
        case IF:
        case RETURN:
        case WHEN:
        case WHILE:
        case IDENT:
        case 85:
          ;
          break;
        default:
          jj_la1[82] = jj_gen;
          break label_19;
        }
        s = statement();
    jjtn000.statements.add(s);
        jj_consume_token(83);
      }
      jj_consume_token(END);
      jj_consume_token(FOR);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMForIndices for_indices() throws ParseException {
                                       /*@bgen(jjtree) ForIndices */
  OMForIndices jjtn000 = new OMForIndices(JJTFORINDICES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMForIndex fi;
    try {
      fi = for_index();
    jjtn000.forIndices.add(fi);
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_20;
        }
        jj_consume_token(89);
        fi = for_index();
    jjtn000.forIndices.add(fi);
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMForIndex for_index() throws ParseException {
                                 /*@bgen(jjtree) ForIndex */
  OMForIndex jjtn000 = new OMForIndex(JJTFORINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  OMExpression exp;
    try {
      t = jj_consume_token(IDENT);
    jjtn000.name = t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        jj_consume_token(IN);
        exp = expression();
    jjtn000.inExpression = exp;
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMWhileStatement while_statement() throws ParseException {
                                                   /*@bgen(jjtree) WhileStatement */
  OMWhileStatement jjtn000 = new OMWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMExpression exp;
  OMStatement s;
    try {
      jj_consume_token(WHILE);
      exp = expression();
    jjtn000.whileExpression = exp;
      jj_consume_token(LOOP);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case FOR:
        case IF:
        case RETURN:
        case WHEN:
        case WHILE:
        case IDENT:
        case 85:
          ;
          break;
        default:
          jj_la1[85] = jj_gen;
          break label_21;
        }
        s = statement();
    jjtn000.statements.add(s);
        jj_consume_token(83);
      }
      jj_consume_token(END);
      jj_consume_token(WHILE);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMWhenEquation when_equation() throws ParseException {
                                             /*@bgen(jjtree) WhenEquation */
  OMWhenEquation jjtn000 = new OMWhenEquation(JJTWHENEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMExpression exp;
  OMEquation e;
  List<OMEquation>list;
    try {
      jj_consume_token(WHEN);
      exp = expression();
    jjtn000.whenExpression = exp;
      jj_consume_token(THEN);
      label_22:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_22;
        }
        e = equation();
    jjtn000.whenEquations.add(e);
        jj_consume_token(83);
      }
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEWHEN:
          ;
          break;
        default:
          jj_la1[86] = jj_gen;
          break label_23;
        }
        jj_consume_token(ELSEWHEN);
        exp = expression();
    jjtn000.elseWhenExpressions.add(exp);
    jjtn000.elseWhenEquationsList.add(list = new LinkedList<OMEquation>());
        jj_consume_token(THEN);
        label_24:
        while (true) {
          if (jj_2_14(2)) {
            ;
          } else {
            break label_24;
          }
          e = equation();
    list.add(e);
          jj_consume_token(83);
        }
      }
      jj_consume_token(END);
      jj_consume_token(WHEN);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMWhenStatement when_statement() throws ParseException {
                                                /*@bgen(jjtree) WhenStatement */
  OMWhenStatement jjtn000 = new OMWhenStatement(JJTWHENSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMExpression exp;
  OMStatement s;
  List<OMStatement>list;
    try {
      jj_consume_token(WHEN);
      exp = expression();
    jjtn000.whenExpression = exp;
      jj_consume_token(THEN);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case FOR:
        case IF:
        case RETURN:
        case WHEN:
        case WHILE:
        case IDENT:
        case 85:
          ;
          break;
        default:
          jj_la1[87] = jj_gen;
          break label_25;
        }
        s = statement();
    jjtn000.whenStatements.add(s);
        jj_consume_token(83);
      }
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSEWHEN:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_26;
        }
        jj_consume_token(ELSEWHEN);
        exp = expression();
    jjtn000.elseWhenExpressions.add(exp);
    jjtn000.elseWhenStatementsList.add(list = new LinkedList<OMStatement>());
        jj_consume_token(THEN);
        label_27:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BREAK:
          case FOR:
          case IF:
          case RETURN:
          case WHEN:
          case WHILE:
          case IDENT:
          case 85:
            ;
            break;
          default:
            jj_la1[89] = jj_gen;
            break label_27;
          }
          s = statement();
    list.add(s);
          jj_consume_token(83);
        }
      }
      jj_consume_token(END);
      jj_consume_token(WHEN);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMConnectClause connect_clause() throws ParseException {
                                                /*@bgen(jjtree) ConnectClause */
  OMConnectClause jjtn000 = new OMConnectClause(JJTCONNECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONNECT);
      jj_consume_token(85);
      jjtn000.src = component_reference();
      jj_consume_token(89);
      jjtn000.dest = component_reference();
      jj_consume_token(87);
                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                               jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/********************************************************************************                                Expressions********************************************************************************/
  final public OMExpression expression() throws ParseException {
                                      /*@bgen(jjtree) Expression */
  OMExpression jjtn000 = new OMExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMExpression exp;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END:
      case FALSE:
      case INITIAL:
      case NOT:
      case TRUE:
      case PLUS:
      case MINUS:
      case DOT_PLUS:
      case DOT_MINUS:
      case IDENT:
      case STRING:
      case UNSIGNED_INTEGER:
      case UNSIGNED_NUMBER:
      case 85:
      case 93:
      case 95:
      case 97:
        jjtn000.simpleExpression = simple_expression();
        break;
      case IF:
        jj_consume_token(IF);
        exp = expression();
    jjtn000.ifCondition = exp;
        jj_consume_token(THEN);
        exp = expression();
    jjtn000.ifExpression = exp;
        label_28:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ELSEIF:
            ;
            break;
          default:
            jj_la1[90] = jj_gen;
            break label_28;
          }
          jj_consume_token(ELSEIF);
          exp = expression();
    jjtn000.elseIfConditions.add(exp);
          jj_consume_token(THEN);
          exp = expression();
    jjtn000.elseIfExpressions.add(exp);
        }
        jj_consume_token(ELSE);
        exp = expression();
    jjtn000.elseExpression = exp;
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMSimpleExpression simple_expression() throws ParseException {
                                                         /*@bgen(jjtree) SimpleExpression */
  OMSimpleExpression jjtn000 = new OMSimpleExpression(JJTSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMLogicalExpression le;
    try {
      le = logical_expression();
    jjtn000.logicalExpression = le;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 86:
        jj_consume_token(86);
        le = logical_expression();
    jjtn000.logicalExpression1 = le;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 86:
          jj_consume_token(86);
          le = logical_expression();
    jjtn000.logicalExpression2 = le;
          break;
        default:
          jj_la1[92] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[93] = jj_gen;
        ;
      }
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMLogicalExpression logical_expression() throws ParseException {
                                                            /*@bgen(jjtree) LogicalExpression */
  OMLogicalExpression jjtn000 = new OMLogicalExpression(JJTLOGICALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMLogicalTerm lt;
    try {
      lt = logical_term();
    jjtn000.logicalTerms.add(lt);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[94] = jj_gen;
          break label_29;
        }
        jj_consume_token(OR);
        lt = logical_term();
    jjtn000.logicalTerms.add(lt);
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMLogicalTerm logical_term() throws ParseException {
                                          /*@bgen(jjtree) LogicalTerm */
  OMLogicalTerm jjtn000 = new OMLogicalTerm(JJTLOGICALTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMLogicalFactor lf;
    try {
      lf = logical_factor();
    jjtn000.logicalFactors.add(lf);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[95] = jj_gen;
          break label_30;
        }
        jj_consume_token(AND);
        lf = logical_factor();
    jjtn000.logicalFactors.add(lf);
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMLogicalFactor logical_factor() throws ParseException {
                                                /*@bgen(jjtree) LogicalFactor */
  OMLogicalFactor jjtn000 = new OMLogicalFactor(JJTLOGICALFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);OMRelation r;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
    jjtn000.not = true;
        break;
      default:
        jj_la1[96] = jj_gen;
        ;
      }
      r = relation();
    jjtn000.relation = r;
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMRelation relation() throws ParseException {
                                /*@bgen(jjtree) Relation */
  OMRelation jjtn000 = new OMRelation(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  OMArithmeticExpression ae;
    try {
      ae = arithmetic_expression();
    jjtn000.arithmeticExpression1 = ae;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REL_OP:
        t = jj_consume_token(REL_OP);
        ae = arithmetic_expression();
    jjtn000.relOp = t.image;
    jjtn000.arithmeticExpression2 = ae;
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMArithmeticExpression arithmetic_expression() throws ParseException {
                                                                     /*@bgen(jjtree) ArithmeticExpression */
  OMArithmeticExpression jjtn000 = new OMArithmeticExpression(JJTARITHMETICEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  OMTerm tm;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case DOT_PLUS:
      case DOT_MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);

          break;
        case MINUS:
          t = jj_consume_token(MINUS);

          break;
        case DOT_PLUS:
          t = jj_consume_token(DOT_PLUS);
          break;
        case DOT_MINUS:
          t = jj_consume_token(DOT_MINUS);
          break;
        default:
          jj_la1[98] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtn000.prefixOp = t.image;
        break;
      default:
        jj_la1[99] = jj_gen;
        ;
      }
      tm = term();
    jjtn000.term = tm;
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case DOT_PLUS:
        case DOT_MINUS:
          ;
          break;
        default:
          jj_la1[100] = jj_gen;
          break label_31;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
          tm = term();
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
          tm = term();
          break;
        case DOT_PLUS:
          t = jj_consume_token(DOT_PLUS);
          tm = term();

          break;
        case DOT_MINUS:
          t = jj_consume_token(DOT_MINUS);
          tm = term();

          break;
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtn000.addOps.add(t.image);
    jjtn000.rhsTerms.add(tm);
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMTerm term() throws ParseException {
                    /*@bgen(jjtree) Term */
  OMTerm jjtn000 = new OMTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  OMFactor f;
  double value;
    try {
      f = factor();
    jjtn000.factor = f;
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT_TIMES:
        case TIMES:
        case DIVIDE:
        case DOT_DIVIDE:
          ;
          break;
        default:
          jj_la1[102] = jj_gen;
          break label_32;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
          t = jj_consume_token(TIMES);
          f = factor();

          break;
        case DIVIDE:
          t = jj_consume_token(DIVIDE);
          f = factor();

          break;
        case DOT_TIMES:
          t = jj_consume_token(DOT_TIMES);
          f = factor();

          break;
        case DOT_DIVIDE:
          t = jj_consume_token(DOT_DIVIDE);
          f = factor();

          break;
        default:
          jj_la1[103] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtn000.mulOps.add(t.image);
    jjtn000.rhsFactors.add(f);
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMFactor factor() throws ParseException {
                          /*@bgen(jjtree) Factor */
  OMFactor jjtn000 = new OMFactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  OMPrimary p1;
  OMPrimary p2;
    try {
      p1 = primary();
    jjtn000.primary = p1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 91:
      case 92:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 91:
          t = jj_consume_token(91);
    jjtn000.op = t.image;
          break;
        case 92:
          t = jj_consume_token(92);
    jjtn000.op = t.image;
          break;
        default:
          jj_la1[104] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        p2 = primary();
    jjtn000.rhsPrimary = p2;
        break;
      default:
        jj_la1[105] = jj_gen;
        ;
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMPrimary primary() throws ParseException {
                             /*@bgen(jjtree) Primary */
  OMPrimary jjtn000 = new OMPrimary(JJTPRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
  OMExpression[]exps;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END:
      case FALSE:
      case TRUE:
      case STRING:
      case UNSIGNED_INTEGER:
      case UNSIGNED_NUMBER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNSIGNED_NUMBER:
          t = jj_consume_token(UNSIGNED_NUMBER);

          break;
        case UNSIGNED_INTEGER:
          t = jj_consume_token(UNSIGNED_INTEGER);

          break;
        case STRING:
          t = jj_consume_token(STRING);
    jjtn000.escimg = true;
          break;
        case FALSE:
          t = jj_consume_token(FALSE);
          break;
        case TRUE:
          t = jj_consume_token(TRUE);
          break;
        case END:
          jj_consume_token(END);
          break;
        default:
          jj_la1[106] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    if (t != null){
      // 09 Oct 1 Lei Ting
String s = t.image;
      if (jjtn000.escimg){
        s = t.image.substring(1, t.image.length()-1);
      }
      jjtn000.image = s;
    }
        break;
      default:
        jj_la1[108] = jj_gen;
        if (jj_2_15(2147483647)) {
          jjtn000.funcName = name();
          jjtn000.funcCallArgs = function_call_args();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            jjtn000.componentRef = component_reference();
            break;
          case 85:
            jj_consume_token(85);
            jjtn000.outputExpressionList = output_expression_list();
            jj_consume_token(87);
            break;
          case 93:
            jj_consume_token(93);
            exps = expression_list();
    jjtn000.expressionLists.add(Arrays.asList(exps));
            label_33:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 83:
                ;
                break;
              default:
                jj_la1[107] = jj_gen;
                break label_33;
              }
              jj_consume_token(83);
              exps = expression_list();
    jjtn000.expressionLists.add(Arrays.asList(exps));
            }
            jj_consume_token(94);
            break;
          case 95:
            jj_consume_token(95);
            jjtn000.funcArgs = function_arguments();
            jj_consume_token(96);
            break;
          case INITIAL:
            jj_consume_token(INITIAL);
            jj_consume_token(85);
            jj_consume_token(87);
    jjtn000.initial = true;
            break;
          case 97:
            jj_consume_token(97);
            jj_consume_token(85);
            jj_consume_token(87);
    jjtn000.terminal = true;
            break;
          default:
            jj_la1[109] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String name() throws ParseException {
  Token t;
  StringBuilder sb = new StringBuilder();
  String n;
    t = jj_consume_token(IDENT);
    n = t.image;
    sb.append(n);
    if (jj_2_16(2)) {
      jj_consume_token(98);
      n = name();
    sb.append("."+n);
    } else {
      ;
    }
    {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public OMComponentRef component_reference() throws ParseException {
                                                   /*@bgen(jjtree) ComponentRef */
  OMComponentRef jjtn000 = new OMComponentRef(JJTCOMPONENTREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  OMComponentRef cr;
    try {
      t = jj_consume_token(IDENT);
    jjtn000.name = t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jjtn000.arraySubscripts = array_subscripts();
        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 98:
        jj_consume_token(98);
        cr = component_reference();
    jjtn000.next = cr;
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMFunctionCallArgs function_call_args() throws ParseException {
                                                          /*@bgen(jjtree) FunctionCallArgs */
  OMFunctionCallArgs jjtn000 = new OMFunctionCallArgs(JJTFUNCTIONCALLARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(85);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case END:
      case FALSE:
      case IF:
      case INITIAL:
      case NOT:
      case TRUE:
      case PLUS:
      case MINUS:
      case DOT_PLUS:
      case DOT_MINUS:
      case IDENT:
      case STRING:
      case UNSIGNED_INTEGER:
      case UNSIGNED_NUMBER:
      case 85:
      case 93:
      case 95:
      case 97:
        jjtn000.funcArgs = function_arguments();
        break;
      default:
        jj_la1[112] = jj_gen;
        ;
      }
      jj_consume_token(87);
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMFunctionArguments function_arguments() throws ParseException {
                                                            /*@bgen(jjtree) FunctionArguments */
  OMFunctionArguments jjtn000 = new OMFunctionArguments(JJTFUNCTIONARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_17(2147483647)) {
        jjtn000.namedArguments = named_arguments();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case END:
        case FALSE:
        case IF:
        case INITIAL:
        case NOT:
        case TRUE:
        case PLUS:
        case MINUS:
        case DOT_PLUS:
        case DOT_MINUS:
        case IDENT:
        case STRING:
        case UNSIGNED_INTEGER:
        case UNSIGNED_NUMBER:
        case 85:
        case 93:
        case 95:
        case 97:
          jjtn000.expression = expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case FOR:
          case 89:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 89:
              jj_consume_token(89);
              jjtn000.next = function_arguments();
              break;
            case FOR:
              jj_consume_token(FOR);
              jjtn000.forIndices = for_indices();
              break;
            default:
              jj_la1[113] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[114] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[115] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMNamedArgument[] named_arguments() throws ParseException {
  OMNamedArgument na;
  OMNamedArgument[]nas;
  List<OMNamedArgument>list = new LinkedList<OMNamedArgument>();
    na = named_argument();
    list.add(na);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 89:
      jj_consume_token(89);
      nas = named_arguments();
    list.addAll(Arrays.asList(nas));
      break;
    default:
      jj_la1[116] = jj_gen;
      ;
    }
    {if (true) return list.toArray(new OMNamedArgument[0]);}
    throw new Error("Missing return statement in function");
  }

  final public OMNamedArgument named_argument() throws ParseException {
                                                /*@bgen(jjtree) NamedArgument */
  OMNamedArgument jjtn000 = new OMNamedArgument(JJTNAMEDARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENT);
    jjtn000.name = t.image;
      jj_consume_token(84);
      jjtn000.expression = expression();
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMExpression[] output_expression_list() throws ParseException {
  OMExpression exp;
  List<OMExpression>list = new LinkedList<OMExpression>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case END:
    case FALSE:
    case IF:
    case INITIAL:
    case NOT:
    case TRUE:
    case PLUS:
    case MINUS:
    case DOT_PLUS:
    case DOT_MINUS:
    case IDENT:
    case STRING:
    case UNSIGNED_INTEGER:
    case UNSIGNED_NUMBER:
    case 85:
    case 93:
    case 95:
    case 97:
      exp = expression();
    list.add(exp);
      break;
    default:
      jj_la1[117] = jj_gen;
      ;
    }
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        ;
        break;
      default:
        jj_la1[118] = jj_gen;
        break label_34;
      }
      jj_consume_token(89);
      exp = expression();
    list.add(exp);
    }
    {if (true) return list.toArray(new OMExpression[0]);}
    throw new Error("Missing return statement in function");
  }

  final public OMExpression[] expression_list() throws ParseException {
  OMExpression exp;
  List<OMExpression>expList = new LinkedList<OMExpression>();
    exp = expression();
    expList.add(exp);
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        ;
        break;
      default:
        jj_la1[119] = jj_gen;
        break label_35;
      }
      jj_consume_token(89);
      exp = expression();
    expList.add(exp);
    }
    {if (true) return expList.toArray(new OMExpression[0]);}
    throw new Error("Missing return statement in function");
  }

  final public OMSubscript[] array_subscripts() throws ParseException {
  OMSubscript s;
  List<OMSubscript>list = new LinkedList<OMSubscript>();
    jj_consume_token(93);
    s = subscript();
    list.add(s);
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        ;
        break;
      default:
        jj_la1[120] = jj_gen;
        break label_36;
      }
      jj_consume_token(89);
      s = subscript();
    list.add(s);
    }
    jj_consume_token(94);
    {if (true) return list.toArray(new OMSubscript[0]);}
    throw new Error("Missing return statement in function");
  }

  final public OMSubscript subscript() throws ParseException {
                                   /*@bgen(jjtree) Subscript */
  OMSubscript jjtn000 = new OMSubscript(JJTSUBSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 86:
        jj_consume_token(86);
    jjtn000.sep = true;
        break;
      case END:
      case FALSE:
      case IF:
      case INITIAL:
      case NOT:
      case TRUE:
      case PLUS:
      case MINUS:
      case DOT_PLUS:
      case DOT_MINUS:
      case IDENT:
      case STRING:
      case UNSIGNED_INTEGER:
      case UNSIGNED_NUMBER:
      case 85:
      case 93:
      case 95:
      case 97:
        jjtn000.expression = expression();
        break;
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public OMComment comment() throws ParseException {
                             /*@bgen(jjtree) Comment */
  OMComment jjtn000 = new OMComment(JJTCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.string = string_comment();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANNOTATION:
        jjtn000.annotation = annotation();
        break;
      default:
        jj_la1[122] = jj_gen;
        ;
      }
                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String string_comment() throws ParseException {
  Token t;
  StringBuilder sb = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      t = jj_consume_token(STRING);
    sb.append(t.image.substring(1, t.image.length()-1));
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          ;
          break;
        default:
          jj_la1[123] = jj_gen;
          break label_37;
        }
        jj_consume_token(PLUS);
        t = jj_consume_token(STRING);
    sb.append(t.image.substring(1, t.image.length()-1));
      }
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
    {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public OMAnnotation annotation() throws ParseException {
                                      /*@bgen(jjtree) Annotation */
  OMAnnotation jjtn000 = new OMAnnotation(JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ANNOTATION);
      jjtn000.classModification = class_modification();
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(LOOP)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_272()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_259()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_133()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(94)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(IMPORT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) return true;
    }
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_201()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(REPLACEABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_250()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(OUTER)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(INNER)) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(REDECLARE)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_200()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(98)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_72()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(LOOP)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_271()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(84)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_105()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(LOOP)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(84)) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_66()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_278()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_237() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(85)) return true;
    xsp = jj_scanpos;
    if (jj_3R_241()) jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_244()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_3R_244()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_88()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(THEN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_277()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_244()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(EXTERNAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(85)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(THEN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_268()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_270()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(PROTECTED)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(90)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_49()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(THEN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(98)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(89)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(THEN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(97)) return true;
    if (jj_scan_token(85)) return true;
    if (jj_scan_token(87)) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(INITIAL)) return true;
    if (jj_scan_token(85)) return true;
    if (jj_scan_token(87)) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_119()) return true;
    if (jj_scan_token(96)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(85)) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_238()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_239()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(83)) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(93)) return true;
    if (jj_3R_189()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(94)) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(85)) return true;
    if (jj_3R_188()) return true;
    if (jj_scan_token(87)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(85)) return true;
    if (jj_3R_188()) return true;
    if (jj_scan_token(87)) return true;
    if (jj_scan_token(90)) return true;
    if (jj_3R_43()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_41()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) return true;
    }
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(84)) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_43()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_45()) return true;
    if (jj_scan_token(84)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_244()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_240() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) return true;
    }
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(UNSIGNED_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(UNSIGNED_NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(84)) return true;
    if (jj_scan_token(88)) return true;
    if (jj_scan_token(85)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(89)) return true;
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_226()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(87)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(86)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(DOT_DIVIDE)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_72()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(84)) return true;
    if (jj_scan_token(ENUMERATION)) return true;
    if (jj_scan_token(85)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(84)) return true;
    if (jj_3R_40()) return true;
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(INITIAL)) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(92)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    if (jj_scan_token(ALGORITHM)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_240()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_3R_38()) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_161()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_72()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(DOT_MINUS)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) jj_scanpos = xsp;
    if (jj_scan_token(CONNECTOR)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(INITIAL)) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(DOT_TIMES)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_scan_token(EQUATION)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(PARTIAL)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(ENCAPSULATED)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_149()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_150()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_221()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_53()) return true;
    if (jj_3R_170()) return true;
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(DOT_PLUS)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(REPLACEABLE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(EACH)) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_140()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(REDECLARE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) return true;
    }
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(REL_OP)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(84)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_202()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_122()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(EACH)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_100()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(85)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(90)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(84)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_121()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_211() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(86)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(86)) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_58()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_221()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_280()) jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_scan_token(89)) return true;
    if (jj_3R_275()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_275()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_276()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(CONNECT)) return true;
    if (jj_scan_token(85)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(89)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(87)) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_244()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(OUTPUT)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_scan_token(ELSEWHEN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(THEN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_279()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(INPUT)) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_3R_244()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(CONSTANT)) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(PARAMETER)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(DISCRETE)) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(THEN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_273()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_274()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(WHEN)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(ANNOTATION)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(STREAM)) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_212()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(FLOW)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(ELSEWHEN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(THEN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_53()) return true;
    if (jj_3R_170()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_266()) jj_scanpos = xsp;
    if (jj_3R_267()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(DOT_TIMES)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(CONSTRAINEDBY)) return true;
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(THEN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(WHEN)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_72()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(86)) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_244()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_244()) return true;
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(84)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ModelicaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[125];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x44405400,0x40000000,0x400000,0x0,0x4000000,0x4005400,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x2000080,0x0,0x80,0x0,0x0,0x200,0x10000000,0x200,0x20800000,0xcc42d600,0xcc42d600,0x0,0x40000000,0x0,0x0,0x8442d400,0x8442d400,0x10000,0x8442d400,0xcc42d400,0x0,0x0,0x0,0x200,0x0,0x0,0x80000000,0x80000000,0x28000,0x28000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40040000,0x0,0x40040000,0x40000,0x40000000,0x0,0x0,0x40000,0x40000000,0x8442d400,0x8442d400,0x8442d400,0x10000,0x0,0x20802200,0x0,0xa00,0xa00,0x2000,0x0,0x800,0x100000,0x80000,0x800,0x100000,0x800,0x800,0x80000,0x800,0x0,0x0,0x800,0x200000,0x800,0x200000,0x800,0x100000,0x20800000,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20800000,0x0,0x20800000,0x0,0x0,0x0,0x20800000,0x0,0x0,0x20800000,0x0,0x20800000,0x0,0x0,0x0,0x20800000,0x200,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x20000000,0x4094202,0x0,0x0,0x10000,0x0,0x4084202,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60020,0x60000,0x20,0x0,0x0,0x0,0x0,0x0,0x82000424,0x4b9f2ca,0x4b9f2ca,0x100000,0x0,0x40,0x1000,0x489e282,0x489e282,0x0,0x4a9e282,0x4b9f2ca,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x8000,0x8000,0x2080,0x2080,0x0,0x4,0x0,0x0,0x0,0x0,0x300000,0x0,0x300000,0x0,0x0,0x200000,0x0,0x0,0x0,0x489e282,0x4a9e282,0x489e282,0x0,0x20,0x8a000425,0x20,0x18400005,0x18400005,0x8000005,0x0,0x18400005,0x0,0x0,0x18400005,0x0,0x18400005,0x18400005,0x0,0x18400005,0x0,0x10,0x18400005,0x0,0x18400005,0x0,0x18400005,0x0,0x82000424,0x0,0x0,0x800,0x0,0x400,0x40000000,0x80000000,0x80000000,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x2000000,0x0,0x2000000,0x20,0x0,0x0,0x82000424,0x1,0x1,0x82000424,0x0,0x82000424,0x0,0x0,0x0,0x82000424,0x0,0x80000000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x200000,0x400200,0x400200,0x2000000,0x200000,0x200,0x2000000,0x0,0x0,0x0,0x1000,0x200,0x0,0x0,0x0,0xa0261207,0x200,0x200,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x200,0x200,0x10,0x200,0x200000,0x0,0x200000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x20000000,0x4300000,0x100000,0x4300000,0x200,0x2000000,0x200,0x0,0x0,0x200,0x4300000,0x0,0x0,0x200,0x200,0x200,0x0,0x0,0xa0261207,0x0,0x200200,0x200200,0x200,0x4200000,0x200200,0x0,0x0,0x200200,0x0,0x200200,0x200200,0x0,0x200200,0x2000000,0x0,0x200200,0x0,0x200200,0x0,0x200200,0x0,0xa0261207,0x400000,0x400000,0x0,0x0,0x0,0x0,0x7,0x7,0x7,0x7,0xf0,0xf0,0x18000000,0x18000000,0x61000,0x80000,0x61000,0xa0200200,0x20000000,0x0,0xa0261207,0x2000000,0x2000000,0xa0261207,0x2000000,0xa0261207,0x2000000,0x2000000,0x2000000,0xa0661207,0x0,0x0,0x1000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x4,0x2,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x2,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[17];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ModelicaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ModelicaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ModelicaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 125; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 125; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ModelicaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ModelicaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 125; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 125; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ModelicaParser(ModelicaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 125; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ModelicaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 125; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[99];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 125; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 99; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 17; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
