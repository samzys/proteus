/* Generated By:JJTree&JavaCC: Do not edit this line. ModelicaParserTokenManager.java */
package com.infoscient.proteus.modelica.parser;
import java.util.List;
import java.util.LinkedList;
import java.util.Arrays;

/** Token Manager. */
public class ModelicaParserTokenManager implements ModelicaParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3fffffffffffff80L) != 0L || (active1 & 0x201000000L) != 0L)
         {
            jjmatchedKind = 73;
            return 7;
         }
         if ((active1 & 0x410000096L) != 0L)
            return 66;
         if ((active1 & 0x100000L) != 0L)
            return 1;
         if ((active1 & 0x40L) != 0L)
            return 46;
         return -1;
      case 1:
         if ((active0 & 0x3ffff70bffffff80L) != 0L || (active1 & 0x201000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 1;
            }
            return 7;
         }
         if ((active0 & 0x8f400000000L) != 0L)
            return 7;
         return -1;
      case 2:
         if ((active0 & 0x3ffff3eaff7ffe80L) != 0L || (active1 & 0x201000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 2;
            return 7;
         }
         if ((active0 & 0x40100800100L) != 0L)
            return 7;
         return -1;
      case 3:
         if ((active0 & 0x30fff2ea7f43fe80L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 3;
            }
            return 7;
         }
         if ((active0 & 0xf000100803c0000L) != 0L)
            return 7;
         return -1;
      case 4:
         if ((active0 & 0x20ffe02a1f73e280L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
            return 7;
         }
         if ((active0 & 0x100012c060001c00L) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active0 & 0x33c0221f63e280L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
            return 7;
         }
         if ((active0 & 0x20cc200800100000L) != 0L)
            return 7;
         return -1;
      case 6:
         if ((active0 & 0x32800217638280L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 6;
            }
            return 7;
         }
         if ((active0 & 0x1402008006000L) != 0L)
            return 7;
         return -1;
      case 7:
         if ((active0 & 0x32800005414280L) != 0L || (active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 7;
            return 7;
         }
         if ((active0 & 0x212228000L) != 0L)
            return 7;
         return -1;
      case 8:
         if ((active0 & 0x20000005410200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 8;
            return 7;
         }
         if ((active0 & 0x12800000004080L) != 0L)
            return 7;
         return -1;
      case 9:
         if ((active0 & 0x20000001410000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 9;
            return 7;
         }
         if ((active0 & 0x4000200L) != 0L)
            return 7;
         return -1;
      case 10:
         if ((active0 & 0x410000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 10;
            return 7;
         }
         if ((active0 & 0x20000001000000L) != 0L)
            return 7;
         return -1;
      case 11:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 11;
            return 7;
         }
         if ((active0 & 0x400000L) != 0L)
            return 7;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 85);
      case 41:
         return jjStopAtPos(0, 87);
      case 42:
         return jjStopAtPos(0, 69);
      case 43:
         return jjStopAtPos(0, 63);
      case 44:
         return jjStopAtPos(0, 89);
      case 45:
         return jjStopAtPos(0, 64);
      case 46:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000096L);
      case 47:
         return jjStartNfaWithStates_0(0, 70, 46);
      case 58:
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000L);
      case 59:
         return jjStopAtPos(0, 83);
      case 61:
         return jjStartNfaWithStates_0(0, 84, 1);
      case 91:
         return jjStopAtPos(0, 93);
      case 93:
         return jjStopAtPos(0, 94);
      case 94:
         return jjStopAtPos(0, 91);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x380L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xc00L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1f000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1ffc0000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3e0000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xfc00000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x380000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x7c00000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x78000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x700000000000000L, 0x200000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x3800000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 95);
      case 125:
         return jjStopAtPos(0, 96);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 43:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         break;
      case 45:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 47:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 61:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         break;
      case 94:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00020040000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x78000000000000L, active1, 0x201000000L);
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 34, 7);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1900000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000040020000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80381480L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xe001c00300L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x7010001e000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 7);
         return jjMoveStringLiteralDfa2_0(active0, 0x202000000000800L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4300200000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8400000440000L, active1, 0L);
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 7);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x10020000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000000000800L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000002000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x424001e200L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010080000400L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x420008804000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 7);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x81800000000000L, active1, 0x200000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x3a0000L, active1, 0L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x2040300018000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000003000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800046400800L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x200020400L, active1, 0L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 7);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x90124018300000L, active1, 0L);
      case 104:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1024000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0x200000000L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 7);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x6000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000800000280L, active1, 0L);
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20019000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x3002000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x40008000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0400000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 7);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000001006000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2005002000100000L, active1, 0x200000000L);
      case 107:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 7);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 7);
         break;
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 7);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 7);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 7);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x48000810020080L, active1, 0L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 7);
         break;
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x202018200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x1002000008200L, active1, 0L);
      case 99:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x22000000006000L, active1, 0L);
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0xc000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000020000L, active1, 0L);
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 7);
         break;
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x202000080L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 7);
         break;
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 7);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0x200000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1010000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 7);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000015010000L, active1, 0x200000000L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000200000L, active1, 0L);
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 7);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 7);
         break;
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x202000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 7);
         break;
      case 116:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x2800000024280L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0x2800000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x80L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10200L, active1, 0L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 7);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(7, 21, 7);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 7);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 7);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L);
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 7);
         break;
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 52, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      case 109:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 7, 7);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 7);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 7);
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000000L);
      case 110:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 9, 7);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 53, 7);
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      case 100:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(11, 22, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(12, 16, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 70;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddTwoStates(39, 40);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  break;
               case 46:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(52, 53);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAddStates(3, 6);
                  }
                  else if ((0x840000000000L & l) != 0L)
                  {
                     if (kind > 72)
                        kind = 72;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                  }
                  else if (curChar == 46)
                     jjAddStates(7, 10);
                  else if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(9, 11);
                  else if (curChar == 61)
                     jjCheckNAdd(1);
                  if (curChar == 47)
                     jjAddStates(14, 15);
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(1, 44);
                  else if (curChar == 46)
                     jjCheckNAdd(39);
                  else if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if (curChar == 61 && kind > 62)
                     kind = 62;
                  break;
               case 2:
                  if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 61)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if ((0x280000000000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 5:
                  if ((0x840000000000L & l) != 0L && kind > 72)
                     kind = 72;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(9, 11);
                  break;
               case 9:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 10:
                  if (curChar == 39 && kind > 73)
                     kind = 73;
                  break;
               case 20:
                  if (curChar == 63)
                     jjCheckNAddStates(16, 18);
                  break;
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  break;
               case 22:
                  if (curChar == 39)
                     jjCheckNAddStates(16, 18);
                  break;
               case 23:
               case 36:
                  if (curChar == 34)
                     jjCheckNAddStates(11, 13);
                  break;
               case 24:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 25:
                  if (curChar == 34 && kind > 76)
                     kind = 76;
                  break;
               case 35:
                  if (curChar == 63)
                     jjCheckNAddStates(11, 13);
                  break;
               case 37:
                  if (curChar == 39)
                     jjCheckNAddStates(11, 13);
                  break;
               case 38:
                  if (curChar == 46)
                     jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(39, 40);
                  break;
               case 41:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(1, 44);
                  break;
               case 44:
                  if (curChar == 62 && kind > 62)
                     kind = 62;
                  break;
               case 45:
                  if (curChar == 47)
                     jjAddStates(14, 15);
                  break;
               case 47:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 48:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 49:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 50:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 52:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar == 42)
                     jjCheckNAddStates(19, 21);
                  break;
               case 54:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 53);
                  break;
               case 55:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(55, 53);
                  break;
               case 56:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddStates(3, 6);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(58);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(22, 24);
                  break;
               case 60:
                  if (curChar != 46)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(61, 62);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(61, 62);
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if (curChar == 46)
                     jjAddStates(7, 10);
                  break;
               case 67:
                  if (curChar == 45 && kind > 67)
                     kind = 67;
                  break;
               case 68:
                  if (curChar == 42 && kind > 72)
                     kind = 72;
                  break;
               case 69:
                  if (curChar == 47 && kind > 72)
                     kind = 72;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(7);
                  break;
               case 9:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 11:
                  if (curChar == 92)
                     jjAddStates(25, 35);
                  break;
               case 12:
                  if (curChar == 118)
                     jjCheckNAddStates(16, 18);
                  break;
               case 13:
                  if (curChar == 116)
                     jjCheckNAddStates(16, 18);
                  break;
               case 14:
                  if (curChar == 114)
                     jjCheckNAddStates(16, 18);
                  break;
               case 15:
                  if (curChar == 110)
                     jjCheckNAddStates(16, 18);
                  break;
               case 16:
                  if (curChar == 102)
                     jjCheckNAddStates(16, 18);
                  break;
               case 17:
                  if (curChar == 98)
                     jjCheckNAddStates(16, 18);
                  break;
               case 18:
                  if (curChar == 97)
                     jjCheckNAddStates(16, 18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjCheckNAddStates(16, 18);
                  break;
               case 24:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 26:
                  if (curChar == 92)
                     jjAddStates(36, 46);
                  break;
               case 27:
                  if (curChar == 118)
                     jjCheckNAddStates(11, 13);
                  break;
               case 28:
                  if (curChar == 116)
                     jjCheckNAddStates(11, 13);
                  break;
               case 29:
                  if (curChar == 114)
                     jjCheckNAddStates(11, 13);
                  break;
               case 30:
                  if (curChar == 110)
                     jjCheckNAddStates(11, 13);
                  break;
               case 31:
                  if (curChar == 102)
                     jjCheckNAddStates(11, 13);
                  break;
               case 32:
                  if (curChar == 98)
                     jjCheckNAddStates(11, 13);
                  break;
               case 33:
                  if (curChar == 97)
                     jjCheckNAddStates(11, 13);
                  break;
               case 34:
                  if (curChar == 92)
                     jjCheckNAddStates(11, 13);
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 47:
                  jjAddStates(0, 2);
                  break;
               case 52:
                  jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
               case 55:
                  jjCheckNAddTwoStates(55, 53);
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(16, 18);
                  break;
               case 24:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 13);
                  break;
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 52:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 54:
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 70 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   47, 48, 50, 58, 59, 60, 62, 66, 67, 68, 69, 24, 25, 26, 46, 51, 
   9, 10, 11, 53, 54, 56, 59, 60, 62, 12, 13, 14, 15, 16, 17, 18, 
   19, 20, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 
   42, 63, 64, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, 
"\141\154\147\157\162\151\164\150\155", "\141\156\144", "\141\156\156\157\164\141\164\151\157\156", 
"\142\154\157\143\153", "\142\162\145\141\153", "\143\154\141\163\163", 
"\143\157\156\156\145\143\164", "\143\157\156\156\145\143\164\157\162", "\143\157\156\163\164\141\156\164", 
"\143\157\156\163\164\162\141\151\156\145\144\142\171", "\144\151\163\143\162\145\164\145", "\145\141\143\150", "\145\154\163\145", 
"\145\154\163\145\151\146", "\145\154\163\145\167\150\145\156", 
"\145\156\143\141\160\163\165\154\141\164\145\144", "\145\156\144", "\145\156\165\155\145\162\141\164\151\157\156", 
"\145\161\165\141\164\151\157\156", "\145\170\160\141\156\144\141\142\154\145", "\145\170\164\145\156\144\163", 
"\145\170\164\145\162\156\141\154", "\146\141\154\163\145", "\146\151\156\141\154", "\146\154\157\167", 
"\146\157\162", "\146\165\156\143\164\151\157\156", "\151\146", "\151\155\160\157\162\164", 
"\151\156", "\151\156\151\164\151\141\154", "\151\156\156\145\162", 
"\151\156\160\165\164", "\154\157\157\160", "\155\157\144\145\154", "\156\157\164", "\157\162", 
"\157\165\164\145\162", "\157\165\164\160\165\164", "\160\141\143\153\141\147\145", 
"\160\141\162\141\155\145\164\145\162", "\160\141\162\164\151\141\154", "\160\162\157\164\145\143\164\145\144", 
"\160\165\142\154\151\143", "\162\145\143\157\162\144", "\162\145\144\145\143\154\141\162\145", 
"\162\145\160\154\141\143\145\141\142\154\145", "\162\145\164\165\162\156", "\163\164\162\145\141\155", "\164\150\145\156", 
"\164\162\165\145", "\164\171\160\145", "\167\150\145\156", "\167\150\151\154\145", 
"\167\151\164\150\151\156", null, "\53", "\55", "\56\53", "\56\55", null, "\56\52", "\52", "\57", 
"\56\57", null, null, null, null, null, null, null, null, null, null, null, "\73", 
"\75", "\50", "\72", "\51", "\144\145\162", "\54", "\72\75", "\136", "\56\136", 
"\133", "\135", "\173", "\175", "\164\145\162\155\151\156\141\154", "\56", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x7fffe13ffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[70];
private final int[] jjstateSet = new int[140];
protected char curChar;
/** Constructor. */
public ModelicaParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ModelicaParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 70; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
