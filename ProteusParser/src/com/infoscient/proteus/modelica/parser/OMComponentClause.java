/* Generated By:JJTree: Do not edit this line. OMComponentClause.java */

package com.infoscient.proteus.modelica.parser;

import com.infoscient.proteus.types.StringType;

public class OMComponentClause extends SimpleNode {

	public OMTypePrefix typePrefix;

	@StringType(name = "TypeName", category = CATEGORY_CODE)
	public String typeName;

	public OMSubscript[] arraySubscripts;

	public OMComponentList componentList;

	public OMComponentClause(int id) {
		super(id);
	}

	public OMComponentClause(ModelicaParser p, int id) {
		super(p, id);
	}

	/** Accept the visitor. * */
	public Object jjtAccept(ModelicaParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public String toCode() {
		StringBuilder sb = new StringBuilder();
		sb.append(typePrefix.toCode());
		sb.append(typeName + " ");
		if (arraySubscripts != null) {
			sb.append("[");
			int i = 0;
			for (OMSubscript s : arraySubscripts) {
				if (i > 0) {
					sb.append(", ");
				}
				sb.append(s.toCode());
			}
			sb.append("] ");
		}
		sb.append(componentList.toCode());
		return sb.toString();
	}
	//	
	// public OMComponentClause copy() {
	// OMComponentClause copy = new OMComponentClause(parser, id);
	// copy.typePrefix = typePrefix.copy();
	// copy.typeName = typeName;
	// if (arraySubscripts != null) {
	// copy.arraySubscripts = new OMSubscript[arraySubscripts.length];
	// for (int i = 0; i < arraySubscripts.length; i++) {
	// copy.arraySubscripts[i] = arraySubscripts[i].copy();
	// }
	// }
	// copy.componentList = componentList.copy();
	// return copy;
	// }

	public OMComponentList getComponentList() {
		return componentList;
	}

	public void setComponentList(OMComponentList componentList) {
		this.componentList = componentList;
	}
}
