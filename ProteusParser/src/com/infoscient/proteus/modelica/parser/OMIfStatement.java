/* Generated By:JJTree: Do not edit this line. OMIfStatement.java */

package com.infoscient.proteus.modelica.parser;

import java.util.LinkedList;
import java.util.List;

public class OMIfStatement extends SimpleNode {

	public OMExpression ifExpression;

	public List<OMStatement> ifStatements = new LinkedList<OMStatement>();

	public List<OMExpression> elseIfExpressions = new LinkedList<OMExpression>();

	public List<List<OMStatement>> elseIfStatementsList = new LinkedList<List<OMStatement>>();

	public boolean else_;

	public List<OMStatement> elseStatements = new LinkedList<OMStatement>();

	public OMIfStatement(int id) {
		super(id);
	}

	public OMIfStatement(ModelicaParser p, int id) {
		super(p, id);
	}

	/** Accept the visitor. * */
	public Object jjtAccept(ModelicaParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public String toCode() {
		StringBuilder sb = new StringBuilder();
		sb.append("if " + ifExpression.toCode() + " then\n");
		for (OMStatement st : ifStatements) {
			sb.append(st.toCode() + ";\n");
		}
		int i = 0;
		for (OMExpression exp : elseIfExpressions) {
			sb.append("elseif " + exp.toCode() + " then\n");
			List<OMStatement> sts = elseIfStatementsList.get(i++);
			if (sts != null) {
				for (OMStatement st : sts) {
					sb.append(st.toCode() + ";\n");
				}
			}
		}
		if (else_) {
			sb.append("else\n");
			for (OMStatement st : elseStatements) {
				sb.append(st.toCode() + ";\n");
			}
		}
		sb.append("end if\n");
		return sb.toString();
	}
}
