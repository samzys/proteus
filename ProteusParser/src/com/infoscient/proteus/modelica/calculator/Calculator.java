/* Generated By:JJTree&JavaCC: Do not edit this line. Calculator.java */
package com.infoscient.proteus.modelica.calculator;
import java.io.PrintStream;
import java.lang.Double;
import com.infoscient.proteus.modelica.DoubleRecord;
class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants, CalculatorConstants {/*@bgen(jjtree)*/
  protected JJTCalculatorState jjtree = new JJTCalculatorState();public static void main(String[]args)throws ParseException, TokenMgrError, NumberFormatException{
    Calculator parser = new Calculator(System.in);
    parser.Start();
  }
  double previousValue = 0.0;

  final public _Variables Variables() throws ParseException {
                         /*@bgen(jjtree) Variables */
_Variables jjtn000 = new _Variables(JJTVARIABLES);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t;
String s;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case PLUS:
        case MINUS:
        case TIMES:
        case DIVIDE:
        case OPEN_PAR:
        case CLOSE_PAR:
        case POWER:
        case CURLY_OPEN:
        case CURLY_CLOSE:
        case SQUARE_OPEN:
        case SQUARE_CLOSE:
        case IF:
        case THEN:
        case ELSE:
        case FOR:
        case IN:
        case COLON:
        case REL_OP:
        case COMMA:
        case SEMICOLON:
        case PREVIOUS:
        case IDENT:
        case STRING:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
        s = t.image;
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DOT:
              ;
              break;
            default:
              jj_la1[1] = jj_gen;
              break label_2;
            }
            jj_consume_token(DOT);
            t = jj_consume_token(IDENT);
        s +="."+t.image;
          }
                System.out.println(s);
                jjtn000.varList.put(s, null);
          break;
        case NUMBER:
          jj_consume_token(NUMBER);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        case TIMES:
          jj_consume_token(TIMES);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        case OPEN_PAR:
          jj_consume_token(OPEN_PAR);
          break;
        case CLOSE_PAR:
          jj_consume_token(CLOSE_PAR);
          break;
        case POWER:
          jj_consume_token(POWER);
          break;
        case CURLY_OPEN:
          jj_consume_token(CURLY_OPEN);
          break;
        case CURLY_CLOSE:
          jj_consume_token(CURLY_CLOSE);
          break;
        case SQUARE_OPEN:
          jj_consume_token(SQUARE_OPEN);
          break;
        case SQUARE_CLOSE:
          jj_consume_token(SQUARE_CLOSE);
          break;
        case COMMA:
          jj_consume_token(COMMA);
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        case PREVIOUS:
          jj_consume_token(PREVIOUS);
          break;
        case IF:
          jj_consume_token(IF);
          break;
        case ELSE:
          jj_consume_token(ELSE);
          break;
        case THEN:
          jj_consume_token(THEN);
          break;
        case REL_OP:
          jj_consume_token(REL_OP);
          break;
        case FOR:
          jj_consume_token(FOR);
          break;
        case IN:
          jj_consume_token(IN);
          break;
        case COLON:
          jj_consume_token(COLON);
          break;
        case STRING:
          jj_consume_token(STRING);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
{if (true) return jjtn000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public _Functions Functions() throws ParseException {
                        /*@bgen(jjtree) Functions */
        _Functions jjtn000 = new _Functions(JJTFUNCTIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String s;
        _Start v;
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
        case PLUS:
        case MINUS:
        case TIMES:
        case DIVIDE:
        case OPEN_PAR:
        case CLOSE_PAR:
        case POWER:
        case CURLY_OPEN:
        case CURLY_CLOSE:
        case SQUARE_OPEN:
        case SQUARE_CLOSE:
        case IF:
        case THEN:
        case ELSE:
        case FOR:
        case IN:
        case COLON:
        case REL_OP:
        case COMMA:
        case SEMICOLON:
        case PREVIOUS:
        case IDENT:
        case STRING:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          t = jj_consume_token(IDENT);
        s = t.image;
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case DOT:
              ;
              break;
            default:
              jj_la1[4] = jj_gen;
              break label_4;
            }
            jj_consume_token(DOT);
            t = jj_consume_token(IDENT);
                        s +="."+t.image;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OPEN_PAR:
            jj_consume_token(OPEN_PAR);
            v = Start();
                        double d = v.eList.get(0).valueList.get(0).val;
                        System.out.println(s);
                        System.out.println(d);
                        DoubleRecord dr = new DoubleRecord();
                        dr.valList.add(d);
                        dr.arraySubList.add(1);
                jjtn000.varList.put(s, dr);
            jj_consume_token(CLOSE_PAR);
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          break;
        case NUMBER:
          jj_consume_token(NUMBER);
          break;
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        case TIMES:
          jj_consume_token(TIMES);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        case OPEN_PAR:
          jj_consume_token(OPEN_PAR);
          break;
        case CLOSE_PAR:
          jj_consume_token(CLOSE_PAR);
          break;
        case POWER:
          jj_consume_token(POWER);
          break;
        case CURLY_OPEN:
          jj_consume_token(CURLY_OPEN);
          break;
        case CURLY_CLOSE:
          jj_consume_token(CURLY_CLOSE);
          break;
        case SQUARE_OPEN:
          jj_consume_token(SQUARE_OPEN);
          break;
        case SQUARE_CLOSE:
          jj_consume_token(SQUARE_CLOSE);
          break;
        case COMMA:
          jj_consume_token(COMMA);
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        case PREVIOUS:
          jj_consume_token(PREVIOUS);
          break;
        case IF:
          jj_consume_token(IF);
          break;
        case ELSE:
          jj_consume_token(ELSE);
          break;
        case THEN:
          jj_consume_token(THEN);
          break;
        case REL_OP:
          jj_consume_token(REL_OP);
          break;
        case FOR:
          jj_consume_token(FOR);
          break;
        case IN:
          jj_consume_token(IN);
          break;
        case COLON:
          jj_consume_token(COLON);
          break;
        case STRING:
          jj_consume_token(STRING);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof NumberFormatException) {
    {if (true) throw (NumberFormatException)jjte000;}
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
    throw new Error("Missing return statement in function");
  }

//parser specification  final public _Start Start() throws ParseException, NumberFormatException {
                                            /*@bgen(jjtree) Start */
_Start jjtn000 = new _Start(JJTSTART);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);_Expressions t;
    try {
      if (jj_2_1(2)) {
        jj_consume_token(CURLY_OPEN);
        t = Expressions();
        jjtn000.eList.add(t);
        jj_consume_token(CURLY_CLOSE);
      } else if (jj_2_2(2)) {
        jj_consume_token(CURLY_OPEN);
        jj_consume_token(CURLY_OPEN);
        t = Expressions();
        jjtn000.eList.add(t);
        jj_consume_token(CURLY_CLOSE);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[7] = jj_gen;
            break label_5;
          }
          jj_consume_token(COMMA);
          jj_consume_token(CURLY_OPEN);
          t = Expressions();
        jjtn000.eList.add(t);
          jj_consume_token(CURLY_CLOSE);
        }
        jj_consume_token(CURLY_CLOSE);
      } else if (jj_2_3(2)) {
        jj_consume_token(CURLY_OPEN);
        jj_consume_token(SQUARE_OPEN);
        t = Expressions();
  jjtn000.eList.add(t);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_6;
          }
          jj_consume_token(SEMICOLON);
          t = Expressions();
  jjtn000.eList.add(t);
        }
        jj_consume_token(SQUARE_CLOSE);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          jj_consume_token(SQUARE_OPEN);
          t = Expressions();
  jjtn000.eList.add(t);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_8;
            }
            jj_consume_token(SEMICOLON);
            t = Expressions();
  jjtn000.eList.add(t);
          }
          jj_consume_token(SQUARE_CLOSE);
        }
        jj_consume_token(CURLY_CLOSE);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SQUARE_OPEN:
          jj_consume_token(SQUARE_OPEN);
          t = Expressions();
  jjtn000.eList.add(t);
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case SEMICOLON:
              ;
              break;
            default:
              jj_la1[11] = jj_gen;
              break label_9;
            }
            jj_consume_token(SEMICOLON);
            t = Expressions();
  jjtn000.eList.add(t);
          }
          jj_consume_token(SQUARE_CLOSE);
          break;
        case NUMBER:
        case PLUS:
        case MINUS:
        case OPEN_PAR:
        case PREVIOUS:
        case IDENT:
          t = Expressions();
   jjtn000.eList.add(t);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
  {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof NumberFormatException) {
      {if (true) throw (NumberFormatException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public _Expressions Expressions() throws ParseException, NumberFormatException {
                                                         /*@bgen(jjtree) Expressions */
        _Expressions jjtn000 = new _Expressions(JJTEXPRESSIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);_Expression d;
    try {
      d = Expression();
                jjtn000.valueList.add(d);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        d = Expression();
                jjtn000.valueList.add(d);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof NumberFormatException) {
            {if (true) throw (NumberFormatException)jjte000;}
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public _Expression Expression() throws ParseException, NumberFormatException {
                                                       /*@bgen(jjtree) Expression */
  _Expression jjtn000 = new _Expression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);_Term  i;
  _Term  value;
    try {
      value = Term();
  jjtn000.val = value.val;
  jjtn000.termList.add(value);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          i = Term();
    jjtn000.val = jjtn000.val+i.val;
    jjtn000.termList.add(value);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          i = Term();
    jjtn000.val = jjtn000.val -i.val;
    jjtn000.termList.add(value);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public _Term Term() throws ParseException {
                   /*@bgen(jjtree) Term */
  _Term jjtn000 = new _Term(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);_Primary i;
  _Primary value;
    try {
      value = Primary();
  jjtn000.val = value.val;
  jjtn000.primaryList.add(value);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
        case DIVIDE:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIMES:
          jj_consume_token(TIMES);
          i = Primary();
    jjtn000.val = jjtn000.val*i.val;
    jjtn000.primaryList.add(i);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          i = Primary();
    jjtn000.val = jjtn000.val/i.val;
    jjtn000.primaryList.add(i);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof NumberFormatException) {
      {if (true) throw (NumberFormatException)jjte000;}
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public _Primary Primary() throws ParseException, NumberFormatException {
                                                         /*@bgen(jjtree) Primary */
  _Primary jjtn000 = new _Primary(JJTPRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  _Primary i;
  _Primary d;
  _Expression e;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        t = jj_consume_token(NUMBER);
        jjtn000.val =Double.parseDouble(t.image);
        break;
      case IDENT:
        t = jj_consume_token(IDENT);
        jjtn000.val= 1.0;
        //this variable name is going to be looked up in the database

        break;
      case OPEN_PAR:
        jj_consume_token(OPEN_PAR);
        e = Expression();
  jjtn000.val =  e.val;
        jj_consume_token(CLOSE_PAR);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        d = Primary();
            jjtn000.val = d.val *-1;
        break;
      case PLUS:
        jj_consume_token(PLUS);
        d = Primary();
  jjtn000.val = d.val;
        break;
      case PREVIOUS:
        jj_consume_token(PREVIOUS);
    jjtn000.val =  previousValue;
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POWER:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_13;
        }
        jj_consume_token(POWER);
        i = Primary();
        jjtn000.val= Math.pow(jjtn000.val, i.val);
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof NumberFormatException) {
     {if (true) throw (NumberFormatException)jjte000;}
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(OPEN_PAR)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(CURLY_OPEN)) return true;
    if (jj_scan_token(SQUARE_OPEN)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(CURLY_OPEN)) return true;
    if (jj_scan_token(CURLY_OPEN)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(CURLY_OPEN)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(PREVIOUS)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CalculatorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[20];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x9bffffd0,0x4000000,0x9bffffd0,0x9bffffd0,0x4000000,0x400,0x9bffffd0,0x1000000,0x2000000,0x1000000,0x2000000,0x2000000,0x180084d0,0x1000000,0xc0,0xc0,0x300,0x300,0x180004d0,0x1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Calculator(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Calculator(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CalculatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Calculator(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CalculatorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Calculator(CalculatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CalculatorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 20; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[36];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 20; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 36; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
