/* Generated By:JJTree&JavaCC: Do not edit this line. CalculatorConstants.java */
package com.infoscient.proteus.modelica.calculator;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CalculatorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EOL = 3;
  /** RegularExpression Id. */
  int NUMBER = 4;
  /** RegularExpression Id. */
  int DIGITS = 5;
  /** RegularExpression Id. */
  int PLUS = 6;
  /** RegularExpression Id. */
  int MINUS = 7;
  /** RegularExpression Id. */
  int TIMES = 8;
  /** RegularExpression Id. */
  int DIVIDE = 9;
  /** RegularExpression Id. */
  int OPEN_PAR = 10;
  /** RegularExpression Id. */
  int CLOSE_PAR = 11;
  /** RegularExpression Id. */
  int POWER = 12;
  /** RegularExpression Id. */
  int CURLY_OPEN = 13;
  /** RegularExpression Id. */
  int CURLY_CLOSE = 14;
  /** RegularExpression Id. */
  int SQUARE_OPEN = 15;
  /** RegularExpression Id. */
  int SQUARE_CLOSE = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int THEN = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int FOR = 20;
  /** RegularExpression Id. */
  int IN = 21;
  /** RegularExpression Id. */
  int COLON = 22;
  /** RegularExpression Id. */
  int REL_OP = 23;
  /** RegularExpression Id. */
  int COMMA = 24;
  /** RegularExpression Id. */
  int SEMICOLON = 25;
  /** RegularExpression Id. */
  int DOT = 26;
  /** RegularExpression Id. */
  int PREVIOUS = 27;
  /** RegularExpression Id. */
  int IDENT = 28;
  /** RegularExpression Id. */
  int Q_IDENT = 29;
  /** RegularExpression Id. */
  int NONDIGIT = 30;
  /** RegularExpression Id. */
  int STRING = 31;
  /** RegularExpression Id. */
  int S_CHAR = 32;
  /** RegularExpression Id. */
  int Q_CHAR = 33;
  /** RegularExpression Id. */
  int S_ESCAPE = 34;
  /** RegularExpression Id. */
  int DIGIT = 35;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "<EOL>",
    "<NUMBER>",
    "<DIGITS>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"^\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"for\"",
    "\"in\"",
    "\":\"",
    "<REL_OP>",
    "\",\"",
    "\";\"",
    "\".\"",
    "\"$\"",
    "<IDENT>",
    "<Q_IDENT>",
    "<NONDIGIT>",
    "<STRING>",
    "<S_CHAR>",
    "<Q_CHAR>",
    "<S_ESCAPE>",
    "<DIGIT>",
  };

}
