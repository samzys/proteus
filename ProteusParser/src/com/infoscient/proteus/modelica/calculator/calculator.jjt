options{  STATIC = false;  MULTI = true;  NODE_PREFIX = "_";   VISITOR = true;   }PARSER_BEGIN(Calculator)package com.infoscient.proteus.modelica.calculator;import java.io.PrintStream;import java.lang.Double;import com.infoscient.proteus.modelica.DoubleRecord;class Calculator{  public static void main(String[]args)throws ParseException, TokenMgrError, NumberFormatException{    Calculator parser = new Calculator(System.in);    parser.Start();  }  double previousValue = 0.0;}PARSER_END(Calculator)//lexical specificationSKIP:{  " "  | "\t"}TOKEN:{  <EOL:"\n"  | "\r"  | "\r\n">}TOKEN:{  <NUMBER:(<DIGITS> | <DIGITS>"."<DIGITS>  | <DIGITS>"."  | "."<DIGITS>)(("e"  | "E")("+"  | "-")?<DIGITS>)?>}TOKEN:{  <#DIGITS:(["0"-"9"])+>}TOKEN:{   <PLUS:"+">  | <MINUS:"-">  | <TIMES:"*">  | <DIVIDE:"/">  | <OPEN_PAR:"(">  | <CLOSE_PAR:")">  |<POWER: "^">  |<CURLY_OPEN: "{">  |<CURLY_CLOSE: "}">  |<SQUARE_OPEN: "[">  |<SQUARE_CLOSE: "]">}TOKEN:{<IF:"if">|<THEN: "then">|<ELSE: "else">|<FOR: "for">|<IN: "in">|<COLON: ":">| <REL_OP:"<"  | "<="  | ">"  | ">="  | "=="  | "<>">}TOKEN:{<COMMA: ",">|<SEMICOLON: ";">|<DOT: ".">}TOKEN:{  <PREVIOUS:"$">}TOKEN:{  <IDENT:<NONDIGIT>(<NONDIGIT> | <DIGIT>)*>  | <#Q_IDENT:"'"(<Q_CHAR>  | <S_ESCAPE>)+"'">  | <#NONDIGIT:["_", "a"-"z", "A"-"Z"]>  | <STRING:"\""(<S_CHAR>  | <S_ESCAPE>)*"\"">  | <#S_CHAR:~["\"", "\\"]>  | <#Q_CHAR:~["'", "\\"]>  | <#S_ESCAPE:  "\\'"  | "\\\""  | "\\?"  | "\\\\"  | "\\a"  | "\\b"  | "\\f"  | "\\n"  | "\\r"  | "\\t"  | "\\v">  | <#DIGIT:["0"-"9"]>}_Variables Variables(): {Token t;String s;}{((t = <IDENT>{	s = t.image;}(<DOT>t =<IDENT>{	s +="."+t.image;})*	{		System.out.println(s);		jjtThis.varList.put(s, null);		})|<NUMBER>|<PLUS>|<MINUS>| <TIMES>|<DIVIDE>|<OPEN_PAR>|<CLOSE_PAR>|<POWER>|<CURLY_OPEN>|<CURLY_CLOSE>|<SQUARE_OPEN>|<SQUARE_CLOSE>|<COMMA>|<SEMICOLON>|<PREVIOUS>|<IF>|<ELSE>|<THEN>|<REL_OP>|<FOR>|<IN>|<COLON>|<STRING>)*{return jjtThis;}}_Functions Functions():{	Token t;	String s;	_Start v;}{(((t = <IDENT>{	s = t.image;}(<DOT>t =<IDENT>{	s +="."+t.image;})*	)(<OPEN_PAR>v= Start(){			double d = v.eList.get(0).valueList.get(0).val;			System.out.println(s);			System.out.println(d);			DoubleRecord dr = new DoubleRecord();			dr.valList.add(d);			dr.arraySubList.add(1);		jjtThis.varList.put(s, dr);		}<CLOSE_PAR>)?)|<NUMBER>|<PLUS>|<MINUS>| <TIMES>|<DIVIDE>|<OPEN_PAR>|<CLOSE_PAR>|<POWER>|<CURLY_OPEN>|<CURLY_CLOSE>|<SQUARE_OPEN>|<SQUARE_CLOSE>|<COMMA>|<SEMICOLON>|<PREVIOUS>|<IF>|<ELSE>|<THEN>|<REL_OP>|<FOR>|<IN>|<COLON>|<STRING>)*{return jjtThis;}}//parser specification_Start Start()throws NumberFormatException:{_Expressions t;}{  (LOOKAHEAD(2)<CURLY_OPEN>t = Expressions(){  	jjtThis.eList.add(t);  }<CURLY_CLOSE>  |LOOKAHEAD(2)<CURLY_OPEN><CURLY_OPEN>t = Expressions(){  	jjtThis.eList.add(t);  }<CURLY_CLOSE>(<COMMA><CURLY_OPEN>t = Expressions(){  	jjtThis.eList.add(t);  }<CURLY_CLOSE>)*<CURLY_CLOSE>  |LOOKAHEAD(2)<CURLY_OPEN><SQUARE_OPEN>t=Expressions(){  jjtThis.eList.add(t);  }(<SEMICOLON>t= Expressions(){  jjtThis.eList.add(t);  })*<SQUARE_CLOSE>(<COMMA><SQUARE_OPEN>t=Expressions(){  jjtThis.eList.add(t);  }(<SEMICOLON>t= Expressions(){  jjtThis.eList.add(t);  })*<SQUARE_CLOSE>)*<CURLY_CLOSE>  |<SQUARE_OPEN>t=Expressions(){  jjtThis.eList.add(t);  }(<SEMICOLON>t= Expressions(){  jjtThis.eList.add(t);  })*<SQUARE_CLOSE>   | t = Expressions(){   jjtThis.eList.add(t);})   {  return jjtThis;  }}_Expressions Expressions() throws NumberFormatException:{	_Expression d;}{	d = Expression(){		jjtThis.valueList.add(d);	}(<COMMA>d = Expression(){		jjtThis.valueList.add(d);	}	)*	{		return jjtThis;	}}_Expression  Expression()throws NumberFormatException:{  _Term  i;  _Term  value;}{  value = Term(){  jjtThis.val = value.val;  jjtThis.termList.add(value);  }  (<PLUS>i = Term(){    jjtThis.val = jjtThis.val+i.val;    jjtThis.termList.add(value);  }  | <MINUS>i = Term(){    jjtThis.val = jjtThis.val -i.val;    jjtThis.termList.add(value);  }  )*{    return jjtThis;  }}_Term Term()#Term:{  _Primary i;  _Primary value;}{  value = Primary(){  jjtThis.val = value.val;  jjtThis.primaryList.add(value);  }(<TIMES>i = Primary(){    jjtThis.val = jjtThis.val*i.val;    jjtThis.primaryList.add(i);  }  | <DIVIDE>i = Primary(){    jjtThis.val = jjtThis.val/i.val;    jjtThis.primaryList.add(i);  }  )*{    return jjtThis;  }}_Primary Primary()throws NumberFormatException #Primary:{  Token t;  _Primary i;  _Primary d;  _Expression e;}{ ( t = <NUMBER>{  	jjtThis.val =Double.parseDouble(t.image);   }  |t = <IDENT>{  	jjtThis.val= 1.0;  	//this variable name is going to be looked up in the database  }  | <OPEN_PAR>e = Expression(){  jjtThis.val =  e.val;  }<CLOSE_PAR>  | <MINUS>d = Primary(){  	    jjtThis.val = d.val *-1;  }  |<PLUS>d=Primary(){  jjtThis.val = d.val;  }  | <PREVIOUS>{    jjtThis.val =  previousValue;  })( <POWER>i = Primary(){  	jjtThis.val= Math.pow(jjtThis.val, i.val);  })*{  return jjtThis;  }}  