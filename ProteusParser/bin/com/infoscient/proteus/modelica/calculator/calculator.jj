/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\calculator.jj */
/*@egen*/options{  STATIC = false;                                                        }PARSER_BEGIN(Calculator)package com.infoscient.proteus.modelica.calculator;import java.io.PrintStream;import java.lang.Double;import com.infoscient.proteus.modelica.DoubleRecord;class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/  public static void main(String[]args)throws ParseException, TokenMgrError, NumberFormatException{    Calculator parser = new Calculator(System.in);    parser.Start();  }  double previousValue = 0.0;}PARSER_END(Calculator)//lexical specificationSKIP:{  " "  | "\t"}TOKEN:{  <EOL:"\n"  | "\r"  | "\r\n">}TOKEN:{  <NUMBER:(<DIGITS> | <DIGITS>"."<DIGITS>  | <DIGITS>"."  | "."<DIGITS>)(("e"  | "E")("+"  | "-")?<DIGITS>)?>}TOKEN:{  <#DIGITS:(["0"-"9"])+>}TOKEN:{   <PLUS:"+">  | <MINUS:"-">  | <TIMES:"*">  | <DIVIDE:"/">  | <OPEN_PAR:"(">  | <CLOSE_PAR:")">  |<POWER: "^">  |<CURLY_OPEN: "{">  |<CURLY_CLOSE: "}">  |<SQUARE_OPEN: "[">  |<SQUARE_CLOSE: "]">}TOKEN:{<IF:"if">|<THEN: "then">|<ELSE: "else">|<FOR: "for">|<IN: "in">|<COLON: ":">| <REL_OP:"<"  | "<="  | ">"  | ">="  | "=="  | "<>">}TOKEN:{<COMMA: ",">|<SEMICOLON: ";">|<DOT: ".">}TOKEN:{  <PREVIOUS:"$">}TOKEN:{  <IDENT:<NONDIGIT>(<NONDIGIT> | <DIGIT>)*>  | <#Q_IDENT:"'"(<Q_CHAR>  | <S_ESCAPE>)+"'">  | <#NONDIGIT:["_", "a"-"z", "A"-"Z"]>  | <STRING:"\""(<S_CHAR>  | <S_ESCAPE>)*"\"">  | <#S_CHAR:~["\"", "\\"]>  | <#Q_CHAR:~["'", "\\"]>  | <#S_ESCAPE:  "\\'"  | "\\\""  | "\\?"  | "\\\\"  | "\\a"  | "\\b"  | "\\f"  | "\\n"  | "\\r"  | "\\t"  | "\\v">  | <#DIGIT:["0"-"9"]>}_Variables Variables(): {/*@bgen(jjtree) Variables */
_Variables jjtn000 = new _Variables(JJTVARIABLES);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;String s;}{/*@bgen(jjtree) Variables */
try {
/*@egen*/((t = <IDENT>{	s = t.image;}(<DOT>t =<IDENT>{	s +="."+t.image;})*	{		System.out.println(s);		jjtn000.varList.put(s, null);		})|<NUMBER>|<PLUS>|<MINUS>| <TIMES>|<DIVIDE>|<OPEN_PAR>|<CLOSE_PAR>|<POWER>|<CURLY_OPEN>|<CURLY_CLOSE>|<SQUARE_OPEN>|<SQUARE_CLOSE>|<COMMA>|<SEMICOLON>|<PREVIOUS>|<IF>|<ELSE>|<THEN>|<REL_OP>|<FOR>|<IN>|<COLON>|<STRING>)*/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/}_Functions Functions():{/*@bgen(jjtree) Functions */
        _Functions jjtn000 = new _Functions(JJTFUNCTIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	Token t;	String s;	_Start v;}{/*@bgen(jjtree) Functions */
try {
/*@egen*/(((t = <IDENT>{	s = t.image;}(<DOT>t =<IDENT>{	s +="."+t.image;})*	)(<OPEN_PAR>v= Start(){			double d = v.eList.get(0).valueList.get(0).val;			System.out.println(s);			System.out.println(d);			DoubleRecord dr = new DoubleRecord();			dr.valList.add(d);			dr.arraySubList.add(1);		jjtn000.varList.put(s, dr);		}<CLOSE_PAR>)?)|<NUMBER>|<PLUS>|<MINUS>| <TIMES>|<DIVIDE>|<OPEN_PAR>|<CLOSE_PAR>|<POWER>|<CURLY_OPEN>|<CURLY_CLOSE>|<SQUARE_OPEN>|<SQUARE_CLOSE>|<COMMA>|<SEMICOLON>|<PREVIOUS>|<IF>|<ELSE>|<THEN>|<REL_OP>|<FOR>|<IN>|<COLON>|<STRING>)*/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof NumberFormatException) {
    throw (NumberFormatException)jjte000;
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/}//parser specification_Start Start()throws NumberFormatException:{/*@bgen(jjtree) Start */
_Start jjtn000 = new _Start(JJTSTART);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/_Expressions t;}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  (LOOKAHEAD(2)<CURLY_OPEN>t = Expressions(){  	jjtn000.eList.add(t);  }<CURLY_CLOSE>  |LOOKAHEAD(2)<CURLY_OPEN><CURLY_OPEN>t = Expressions(){  	jjtn000.eList.add(t);  }<CURLY_CLOSE>(<COMMA><CURLY_OPEN>t = Expressions(){  	jjtn000.eList.add(t);  }<CURLY_CLOSE>)*<CURLY_CLOSE>  |LOOKAHEAD(2)<CURLY_OPEN><SQUARE_OPEN>t=Expressions(){  jjtn000.eList.add(t);  }(<SEMICOLON>t= Expressions(){  jjtn000.eList.add(t);  })*<SQUARE_CLOSE>(<COMMA><SQUARE_OPEN>t=Expressions(){  jjtn000.eList.add(t);  }(<SEMICOLON>t= Expressions(){  jjtn000.eList.add(t);  })*<SQUARE_CLOSE>)*<CURLY_CLOSE>  |<SQUARE_OPEN>t=Expressions(){  jjtn000.eList.add(t);  }(<SEMICOLON>t= Expressions(){  jjtn000.eList.add(t);  })*<SQUARE_CLOSE>   | t = Expressions(){   jjtn000.eList.add(t);})/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/   {  return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof NumberFormatException) {
      throw (NumberFormatException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}_Expressions Expressions() throws NumberFormatException:{/*@bgen(jjtree) Expressions */
        _Expressions jjtn000 = new _Expressions(JJTEXPRESSIONS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	_Expression d;}{/*@bgen(jjtree) Expressions */
        try {
/*@egen*/	d = Expression(){		jjtn000.valueList.add(d);	}(<COMMA>d = Expression(){		jjtn000.valueList.add(d);	}	)*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	{		return jjtn000;	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof NumberFormatException) {
            throw (NumberFormatException)jjte000;
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/}_Expression  Expression()throws NumberFormatException:{/*@bgen(jjtree) Expression */
  _Expression jjtn000 = new _Expression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  _Term  i;  _Term  value;}{/*@bgen(jjtree) Expression */
  try {
/*@egen*/  value = Term(){  jjtn000.val = value.val;  jjtn000.termList.add(value);  }  (<PLUS>i = Term(){    jjtn000.val = jjtn000.val+i.val;    jjtn000.termList.add(value);  }  | <MINUS>i = Term(){    jjtn000.val = jjtn000.val -i.val;    jjtn000.termList.add(value);  }  )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}_Term Term()     :{/*@bgen(jjtree) Term */
  _Term jjtn000 = new _Term(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  _Primary i;  _Primary value;}{/*@bgen(jjtree) Term */
  try {
/*@egen*/  value = Primary(){  jjtn000.val = value.val;  jjtn000.primaryList.add(value);  }(<TIMES>i = Primary(){    jjtn000.val = jjtn000.val*i.val;    jjtn000.primaryList.add(i);  }  | <DIVIDE>i = Primary(){    jjtn000.val = jjtn000.val/i.val;    jjtn000.primaryList.add(i);  }  )*/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof NumberFormatException) {
      throw (NumberFormatException)jjte000;
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}_Primary Primary()throws NumberFormatException         :{/*@bgen(jjtree) Primary */
  _Primary jjtn000 = new _Primary(JJTPRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  _Primary i;  _Primary d;  _Expression e;}{/*@bgen(jjtree) Primary */
 try {
/*@egen*/ ( t = <NUMBER>{  	jjtn000.val =Double.parseDouble(t.image);   }  |t = <IDENT>{  	jjtn000.val= 1.0;  	//this variable name is going to be looked up in the database  }  | <OPEN_PAR>e = Expression(){  jjtn000.val =  e.val;  }<CLOSE_PAR>  | <MINUS>d = Primary(){  	    jjtn000.val = d.val *-1;  }  |<PLUS>d=Primary(){  jjtn000.val = d.val;  }  | <PREVIOUS>{    jjtn000.val =  previousValue;  })( <POWER>i = Primary(){  	jjtn000.val= Math.pow(jjtn000.val, i.val);  })*/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/{  return jjtn000;  }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof NumberFormatException) {
     throw (NumberFormatException)jjte000;
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/}  