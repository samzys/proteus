options{  STATIC = false;  MULTI = true;  NODE_DEFAULT_VOID = true;  NODE_PREFIX = "OM";  VISITOR = true;}PARSER_BEGIN(ModelicaParser)package com.infoscient.proteus.modelica.parser;import java.util.List;import java.util.LinkedList;import java.util.Arrays;public class ModelicaParser{  public static void main(String[]args)throws ParseException, TokenMgrError{    ModelicaParser parser = new ModelicaParser(System.in);    SimpleNode root = parser.stored_definition();    root.dump("");  }}PARSER_END(ModelicaParser)SKIP:{  " "  | "\t"  | "\n"  | "\r"  | <"//"(~["\n", "\r"])*("\n"  | "\r"  | "\r\n")>  | <"/*"(~["*"])*"*"("*"  | ~["*", "/"](~["*"])*"*")*"/">}TOKEN:{  <ALGORITHM:"algorithm">  | <AND:"and">  | <ANNOTATION:"annotation">  /*	| <ASSERT: "assert"> assert can also appear as a function, making it a keyword breaks it */| <BLOCK:"block">  | <BREAK:"break">  | <CLASS:"class">  | <CONNECT:"connect">  | <CONNECTOR:"connector">  | <CONSTANT:"constant">  | <CONSTRAINEDBY:"constrainedby">  /*	| <DER: "der"> der can also appear as a function, making it a keyword breaks it */| <DISCRETE:"discrete">  | <EACH:"each">  | <ELSE:"else">  | <ELSEIF:"elseif">  | <ELSEWHEN:"elsewhen">  | <ENCAPSULATED:"encapsulated">  | <END:"end">  | <ENUMERATION:"enumeration">  | <EQUATION:"equation">  | <EXPANDABLE:"expandable">  | <EXTENDS:"extends">  | <EXTERNAL:"external">  | <FALSE:"false">  | <FINAL:"final">  | <FLOW:"flow">  | <FOR:"for">  | <FUNCTION:"function">  | <IF:"if">  | <IMPORT:"import">  | <IN:"in">  | <INITIAL:"initial">  /* initial can also appear as a function, making it a keyword breaks it */| <INNER:"inner">  | <INPUT:"input">  | <LOOP:"loop">  | <MODEL:"model">  | <NOT:"not">  | <OR:"or">  | <OUTER:"outer">  | <OUTPUT:"output">  | <PACKAGE:"package">  | <PARAMETER:"parameter">  | <PARTIAL:"partial">  | <PROTECTED:"protected">  | <PUBLIC:"public">  | <RECORD:"record">  | <REDECLARE:"redeclare">  | <REPLACEABLE:"replaceable">  | <RETURN:"return">  | <STREAM:"stream">  | <THEN:"then">  | <TRUE:"true">  | <TYPE:"type">  | <WHEN:"when">  | <WHILE:"while">  | <WITHIN:"within">}TOKEN:{  <REL_OP:"<"  | "<="  | ">"  | ">="  | "=="  | "<>">  | <PLUS:"+">  | <MINUS:"-">  | <DOT_PLUS:".+">  | <DOT_MINUS:".-">  | <ADD_OP:"+"  | "-"  | ".+"  | ".-">  | <DOT_TIMES:".*">  | <TIMES:"*">  | <DIVIDE:"/">  | <DOT_DIVIDE:"./">  | <MUL_OP:<TIMES>  | <DIVIDE>  | <DOT_TIMES>  | <DOT_DIVIDE>>}TOKEN:{  <IDENT:<NONDIGIT>(<NONDIGIT> | <DIGIT>)* | <Q_IDENT>>  | <#Q_IDENT:"'"(<Q_CHAR>  | <S_ESCAPE>)+"'">  | <#NONDIGIT:["_", "a"-"z", "A"-"Z"]>  | <STRING:"\""(<S_CHAR>  | <S_ESCAPE>)*"\"">  | <#S_CHAR:~["\"", "\\"]>  | <#Q_CHAR:~["'", "\\"]>  | <#S_ESCAPE:"\\'"  | "\\\""  | "\\?"  | "\\\\"  | "\\a"  | "\\b"  | "\\f"  | "\\n"  | "\\r"  | "\\t"  | "\\v">  | <#DIGIT:["0"-"9"]>  | <UNSIGNED_INTEGER:(<DIGIT>)+>  | <UNSIGNED_NUMBER:(<UNSIGNED_INTEGER>("."(<UNSIGNED_INTEGER>)?)?(("e"  | "E")("+"  | "-")?<UNSIGNED_INTEGER>)?)  | "."<UNSIGNED_INTEGER>(("e"  | "E")("+"  | "-")?<UNSIGNED_INTEGER>)?>//1 Nov, 2010 Change the Unsignd_number represention to support double number like ".454454"//	|<BOOL: "true"|"false">//	|<INTEGER: <UNSIGNED_INTEGER>>//	|<REAL: (<UNSIGNED_INTEGER>)?"."(<UNSIGNED_INTEGER>)?(("e" | "E") ("+" | "-")? <UNSIGNED_INTEGER>)?>}/********************************************************************************                       Stored Definition - Within********************************************************************************/OMStoredDefinition stored_definition()#StoredDefinition:{  boolean final_ = false;  String s;  OMClassDefinition clsdef;}{  ((<WITHIN>{    jjtThis.within = true;  }  (s = name(){    jjtThis.name = s;  }  )?";")?((<FINAL>{    final_ = true;  }  )?clsdef = class_definition(){    clsdef.final_ = final_;    jjtThis.classDefinitions.add(clsdef);  }  ";")*){    return jjtThis;  }}/********************************************************************************                             Class Definition********************************************************************************/OMClassDefinition class_definition()#ClassDefinition:{  Token opt = null, t;}{  (<ENCAPSULATED>{    jjtThis.encapsulated = true;  }  )?(<PARTIAL>{    jjtThis.partial = true;  }  )?(t = <CLASS>  | t = <MODEL>  | t = <RECORD>  | t = <BLOCK>  | (opt = <EXPANDABLE>)?t = <CONNECTOR>  | t = <TYPE>  | t = <PACKAGE>  | t = <FUNCTION>){    jjtThis.restriction = (opt != null?opt.image:"")+t.image;  }  jjtThis.classSpecifier = class_specifier(){    return jjtThis;  }}OMClassSpecifier class_specifier()#ClassSpecifier:{  Token t;}{  (LOOKAHEAD(2)t = <IDENT>{    jjtThis.name = t.image;  }  jjtThis.description = string_comment()jjtThis.composition = composition()<END><IDENT>{    jjtThis.endTag = true;  	jjtThis.selection = 0;  }  | LOOKAHEAD(3)t = <IDENT>{    jjtThis.name = t.image;  	jjtThis.selection = 1;  }  "="jjtThis.typePrefix =base_prefix()jjtThis.refName=name()(jjtThis.arraySubs=array_subscripts())?(jjtThis.classModification = class_modification())?jjtThis.comment = comment()  | LOOKAHEAD(3)t = <IDENT>{  	jjtThis.selection = 2;    jjtThis.name = t.image;   }  "="<ENUMERATION>"("((jjtThis.omEnumlist=enum_list()  | ":"{jjtThis.allTag = true;}))?")"jjtThis.comment =comment()  | t = <IDENT>{  	jjtThis.selection = 3;    jjtThis.name = t.image;  }  "=""der""("jjtThis.refName = name()","<IDENT>(","<IDENT>)*")"jjtThis.comment = comment()  | <EXTENDS>{  	jjtThis.selection = 4;    jjtThis.extends_ = true;   }  t = <IDENT>{    jjtThis.name = t.image;  }  (jjtThis.classModification = class_modification())?jjtThis.description = string_comment()jjtThis.composition = composition()<END><IDENT>{    jjtThis.endTag = true;  }  ){    return jjtThis;  }}OMTypePrefix base_prefix():{  OMTypePrefix t;}{  t = type_prefix(){    return t;  }}OMEnumList enum_list()#EnumList:{  OMEnumLiteral el;}{  (el = enumeration_literal(){    jjtThis.enumList.add(el);  }  (","el = enumeration_literal(){    jjtThis.enumList.add(el);  }  )*){    return jjtThis;  }}OMEnumLiteral enumeration_literal()#EnumLiteral:{  Token t;}{  (t = <IDENT>{    jjtThis.name = t.image;  }  jjtThis.comment = comment()){    return jjtThis;  }}OMComposition composition()#Composition:{ Token t;  OMElementList el;  OMEquationSection es;  OMAlgorithmSection as;}{  (el = element_list(){    jjtThis.elementList = el;  }  (t = <PUBLIC>el = element_list(){    jjtThis.publicElementLists.add(el);  }  | t=<PROTECTED>el = element_list(){    jjtThis.protectedElementLists.add(el);  }  | LOOKAHEAD(2)es = equation_section(){    jjtThis.equationSections.add(es);  }  | as = algorithm_section(){    jjtThis.algorithmSections.add(as);  }  )*(<EXTERNAL>(language_specification())?(external_function_call())?(annotation())?";")?(jjtThis.annotation =annotation()";")?){    return jjtThis;  }}String language_specification():{  Token t;}{  t = <STRING>{    return t.image.substring(1, t.image.length()-1);  }}OMExternalFuncCall external_function_call()#ExternalFuncCall:{  Token t;}{  ((LOOKAHEAD(2)jjtThis.componentRef = component_reference()"=")?t = <IDENT>{    jjtThis.funcName = t.image;  }  "("(jjtThis.expList = expression_list())?")"){    return jjtThis;  }}OMElementList element_list()#ElementList:{  OMElement e;  OMAnnotation a;}{  (e = element(){    jjtThis.elements.add(e);  }  ";"  | a = annotation(){    jjtThis.annotations.add(a);  }  ";")*{    return jjtThis;  }}OMElement element()#Element:{}{  (jjtThis.importClause = import_clause()  | jjtThis.extendsClause = extends_clause()  | (<REDECLARE>{    jjtThis.redeclare = true;  }  )?(<FINAL>{    jjtThis.final_ = true;  }  )?(<INNER>{    jjtThis.typing= "inner";  }  )?(<OUTER>{    jjtThis.typing = "outer";  }  )?((jjtThis.classDefinition = class_definition()  | jjtThis.componentClause = component_clause())  | <REPLACEABLE>{    jjtThis.replaceable = true;  }  (jjtThis.classDefinition = class_definition()  | jjtThis.componentClause = component_clause())(jjtThis.constrainingClause = constraining_clause()jjtThis.comment = comment())?)){    return jjtThis;  }}OMImportClause import_clause()#ImportClause:{  Token t;  String alias;}{  (<IMPORT>(LOOKAHEAD(2)t = <IDENT>"="jjtThis.name = name(){    jjtThis.alias = t.image;  }  | jjtThis.name = name()(<DOT_TIMES>{    jjtThis.includeSub = true;  }  )?)jjtThis.comment = comment()){    return jjtThis;  }}/********************************************************************************                                  Extends********************************************************************************/OMExtendsClause extends_clause()#ExtendsClause:{}{  (<EXTENDS>jjtThis.name = name()(jjtThis.classModification = class_modification())?(jjtThis.annotation = annotation())?){    return jjtThis;  }}OMConstrainingClause constraining_clause()#ConstrainingClause:{}{  (<CONSTRAINEDBY>jjtThis.name = name()(jjtThis.classModification = class_modification())?){    return jjtThis;  }}/********************************************************************************                             Component Clause********************************************************************************/OMComponentClause component_clause()#ComponentClause:{}{  jjtThis.typePrefix = type_prefix()jjtThis.typeName = type_specifier()(jjtThis.arraySubscripts = array_subscripts())?jjtThis.componentList = component_list(){    return jjtThis;  }}OMTypePrefix type_prefix()#TypePrefix:{}{  //11 Nov, 2010. Stream is new in Modelica library 3.1. (<FLOW>{    jjtThis.flow_stream = "flow";  }  | <STREAM>{    jjtThis.flow_stream = "stream";  }  )?(<DISCRETE>{    jjtThis.variability = "discrete";  }  | <PARAMETER>{    jjtThis.variability = "parameter";  }  | <CONSTANT>{    jjtThis.variability = "constant";  }  )?(<INPUT>{    jjtThis.causality = "input";  }  | <OUTPUT>{    jjtThis.causality = "output";  }  )?{    return jjtThis;  }}String type_specifier():{  String n;}{  n = name(){    return n;  }}OMComponentList component_list()#ComponentList:{  OMComponentDecl cd;}{  (cd = component_declaration(){    jjtThis.componentDecls.add(cd);  }  (","cd = component_declaration(){    jjtThis.componentDecls.add(cd);  }  )*){    return jjtThis;  }}OMComponentDecl component_declaration()#ComponentDecl:{}{  (jjtThis.decl = declaration()(jjtThis.condAttr = conditional_attribute())?jjtThis.comment = comment()){    return jjtThis;  }}OMCondAttr conditional_attribute()#CondAttr:{}{  (<IF>jjtThis.expression = expression()){    return jjtThis;  }}OMDeclaration declaration()#Declaration:{  Token t;}{  (t = <IDENT>{    jjtThis.name = t.image;  }  (jjtThis.arraySubscripts = array_subscripts())?(jjtThis.modification = modification())?){    return jjtThis;  }}/********************************************************************************                               Modification********************************************************************************/OMModification modification()#Modification:{}{  (jjtThis.classModification = class_modification()("="{    jjtThis.eqType = "=";  }  jjtThis.expression = expression())?  | "="{    jjtThis.eqType = "=";  }  jjtThis.expression = expression()  | ":="{    jjtThis.eqType = ":=";  }  jjtThis.expression = expression()){    return jjtThis;  }}OMClassModification class_modification()#ClassModification:{}{  "("(jjtThis.argList = argument_list())?")"{    return jjtThis;  }}OMArgumentList argument_list()#ArgumentList:{  OMArgument arg;}{  (arg = argument(){    jjtThis.argList.add(arg);  }  (","arg = argument(){    jjtThis.argList.add(arg);  }  )*){    return jjtThis;  }}OMArgument argument()#Argument:{}{  (jjtThis.elementModificationOrReplaceable = element_modification_or_replaceable()  | jjtThis.elementRedeclaration = element_redeclaration()){    return jjtThis;  }}OMElementModificationOrReplaceable element_modification_or_replaceable()#ElementModificationOrReplaceable:{}{  ((<EACH>{    jjtThis.each = true;  }  )?(<FINAL>{    jjtThis.final_ = true;  }  )?(jjtThis.elementModification = element_modification()  | jjtThis.elementReplaceable = element_replaceable())){    return jjtThis;  }}OMElementModification element_modification()#ElementModification:{}{  (jjtThis.componentRef = component_reference()(jjtThis.modification = modification())?jjtThis.stringComment = string_comment()){    return jjtThis;  }}OMElementRedeclaration element_redeclaration()#ElementRedeclaration:{}{  (<REDECLARE>(<EACH>{    jjtThis.each = true;  }  )?(<FINAL>{    jjtThis.final_ = true;  }  )?((jjtThis.classDefinition = class_definition()  | jjtThis.componentClause1 = component_clause1())  | jjtThis.elementReplaceable = element_replaceable())){    return jjtThis;  }}OMElementReplaceable element_replaceable()#ElementReplaceable:{}{  (<REPLACEABLE>(jjtThis.classDefinition = class_definition()  | jjtThis.componentClause1 = component_clause1())(jjtThis.constrainingClause = constraining_clause())?){    return jjtThis;  }}OMComponentClause1 component_clause1()#ComponentClause1:{}{  (jjtThis.typePrefix = type_prefix()jjtThis.typeName = type_specifier()jjtThis.componentDecl1 = component_declaration1()){    return jjtThis;  }}OMComponentDecl1 component_declaration1()#ComponentDecl1:{}{  (jjtThis.decl = declaration()jjtThis.comment = comment()){    return jjtThis;  }}/********************************************************************************                                 Equations********************************************************************************/OMEquationSection equation_section()#EquationSection:{  OMEquation e;  OMAnnotation a;}{  (("initial"{    jjtThis.initial = true;  }  )?<EQUATION>(LOOKAHEAD(equation()  | <ANNOTATION>)(e = equation(){    jjtThis.equations.add(e);  }  ";"  | a = annotation(){    jjtThis.annotations.add(a);  }  ";"  ))*){    return jjtThis;  }}OMAlgorithmSection algorithm_section()#AlgorithmSection:{  OMStatement s;  OMAnnotation a;}{  (("initial"{    jjtThis.initial = true;  }  )?<ALGORITHM>(s = statement(){    jjtThis.statements.add(s);  }  ";"  | a = annotation(){    jjtThis.annotations.add(a);  }  ";")*){    return jjtThis;  }}OMEquation equation()#Equation:{  Token t;}{  (LOOKAHEAD(simple_expression()"=")jjtThis.lhsExpression = simple_expression()"="jjtThis.rhsExpression = expression()  | jjtThis.ifEquation = if_equation()  | jjtThis.forEquation = for_equation()  | jjtThis.connectClause = connect_clause()  | jjtThis.whenEquation = when_equation()  //		| t = <IDENT> { jjtThis.funcName = t.image; } jjtThis.funcCallArgs = function_call_args()// 09 Oct 1 Lei Ting| jjtThis.componentRef = component_reference()jjtThis.funcCallArgs = function_call_args())jjtThis.comment = comment(){    return jjtThis;  }}OMStatement statement()#Statement:{}{  (jjtThis.componentRef = component_reference()(":="jjtThis.expression = expression()  | jjtThis.funcCallArgs = function_call_args())  | "("jjtThis.outputExpressionList = output_expression_list()")"":="jjtThis.componentRef = component_reference()jjtThis.funcCallArgs = function_call_args()  | <BREAK>{    jjtThis.break_ = true;  }  | <RETURN>{    jjtThis.return_ = true;  }  | jjtThis.ifStatement = if_statement()  | jjtThis.forStatement = for_statement()  | jjtThis.whileStatement = while_statement()  | jjtThis.whenStatement = when_statement())jjtThis.comment = comment(){    return jjtThis;  }}OMIfEquation if_equation()#IfEquation:{  OMExpression exp;  OMEquation e;  List<OMEquation>list;}{  (<IF>exp = expression(){    jjtThis.ifExpression = exp;  }  <THEN>(LOOKAHEAD(2)e = equation(){    jjtThis.ifEquations.add(e);  }  ";")*(<ELSEIF>exp = expression(){    jjtThis.elseIfExpressions.add(exp);    jjtThis.elseIfEquationsList.add(list = new LinkedList<OMEquation>());  }  <THEN>(LOOKAHEAD(2)e = equation(){    list.add(e);  }  ";")*)*(<ELSE>{    jjtThis.else_ = true;  }  (LOOKAHEAD(2)e = equation(){    jjtThis.elseEquations.add(e);  }  ";")*)?<END><IF>){    return jjtThis;  }}OMIfStatement if_statement()#IfStatement:{  OMExpression exp;  OMStatement s;  List<OMStatement>list;}{  (<IF>exp = expression(){    jjtThis.ifExpression = exp;  }  <THEN>(s = statement(){    jjtThis.ifStatements.add(s);  }  ";")*(<ELSEIF>exp = expression(){    jjtThis.elseIfExpressions.add(exp);    jjtThis.elseIfStatementsList.add(list = new LinkedList<OMStatement>());  }  <THEN>(s = statement(){    list.add(s);  }  ";")*)*(<ELSE>{    jjtThis.else_ = true;  }  (s = statement(){    jjtThis.elseStatements.add(s);  }  ";")*)?<END><IF>){    return jjtThis;  }}OMForEquation for_equation()#ForEquation:{  OMEquation e;}{  (<FOR>jjtThis.forIndices = for_indices()<LOOP>(LOOKAHEAD(2)e = equation(){    jjtThis.equations.add(e);  }  ";")*<END><FOR>){    return jjtThis;  }}OMForStatement for_statement()#ForStatement:{  OMStatement s;}{  (<FOR>jjtThis.forIndices = for_indices()<LOOP>(s = statement(){    jjtThis.statements.add(s);  }  ";")*<END><FOR>){    return jjtThis;  }}OMForIndices for_indices()#ForIndices:{  OMForIndex fi;}{  (fi = for_index(){    jjtThis.forIndices.add(fi);  }  (","fi = for_index(){    jjtThis.forIndices.add(fi);  }  )*){    return jjtThis;  }}OMForIndex for_index()#ForIndex:{  Token t;  OMExpression exp;}{  (t = <IDENT>{    jjtThis.name = t.image;  }  (<IN>exp = expression(){    jjtThis.inExpression = exp;  }  )?){    return jjtThis;  }}OMWhileStatement while_statement()#WhileStatement:{  OMExpression exp;  OMStatement s;}{  (<WHILE>exp = expression(){    jjtThis.whileExpression = exp;  }  <LOOP>(s = statement(){    jjtThis.statements.add(s);  }  ";")*<END><WHILE>){    return jjtThis;  }}OMWhenEquation when_equation()#WhenEquation:{  OMExpression exp;  OMEquation e;  List<OMEquation>list;}{  (<WHEN>exp = expression(){    jjtThis.whenExpression = exp;  }  <THEN>(LOOKAHEAD(2)e = equation(){    jjtThis.whenEquations.add(e);  }  ";")*(<ELSEWHEN>exp = expression(){    jjtThis.elseWhenExpressions.add(exp);    jjtThis.elseWhenEquationsList.add(list = new LinkedList<OMEquation>());  }  <THEN>(LOOKAHEAD(2)e = equation(){    list.add(e);  }  ";")*)*<END><WHEN>){    return jjtThis;  }}OMWhenStatement when_statement()#WhenStatement:{  OMExpression exp;  OMStatement s;  List<OMStatement>list;}{  (<WHEN>exp = expression(){    jjtThis.whenExpression = exp;  }  <THEN>(s = statement(){    jjtThis.whenStatements.add(s);  }  ";")*(<ELSEWHEN>exp = expression(){    jjtThis.elseWhenExpressions.add(exp);    jjtThis.elseWhenStatementsList.add(list = new LinkedList<OMStatement>());  }  <THEN>(s = statement(){    list.add(s);  }  ";")*)*<END><WHEN>){    return jjtThis;  }}OMConnectClause connect_clause()#ConnectClause:{}{  (<CONNECT>"("jjtThis.src = component_reference()","jjtThis.dest = component_reference()")"){    return jjtThis;  }}/********************************************************************************                                Expressions********************************************************************************/OMExpression expression()#Expression:{  OMExpression exp;}{  ((jjtThis.simpleExpression = simple_expression()  | <IF>exp = expression(){    jjtThis.ifCondition = exp;  }  <THEN>exp = expression(){    jjtThis.ifExpression = exp;  }  (<ELSEIF>exp = expression(){    jjtThis.elseIfConditions.add(exp);  }  <THEN>exp = expression(){    jjtThis.elseIfExpressions.add(exp);  }  )*<ELSE>exp = expression(){    jjtThis.elseExpression = exp;  }  )){    return jjtThis;  }}OMSimpleExpression simple_expression()#SimpleExpression:{  OMLogicalExpression le;}{  (le = logical_expression(){    jjtThis.logicalExpression = le;  }  (":"le = logical_expression(){    jjtThis.logicalExpression1 = le;  }  (":"le = logical_expression(){    jjtThis.logicalExpression2 = le;  }  )?)?){    return jjtThis;  }}OMLogicalExpression logical_expression()#LogicalExpression:{  OMLogicalTerm lt;}{  (lt = logical_term(){    jjtThis.logicalTerms.add(lt);  }  (<OR>lt = logical_term(){    jjtThis.logicalTerms.add(lt);  }  )*){    return jjtThis;  }}OMLogicalTerm logical_term()#LogicalTerm:{  OMLogicalFactor lf;}{  (lf = logical_factor(){    jjtThis.logicalFactors.add(lf);  }  (<AND>lf = logical_factor(){    jjtThis.logicalFactors.add(lf);  }  )*){    return jjtThis;  }}OMLogicalFactor logical_factor()#LogicalFactor:{  OMRelation r;}{  ((<NOT>{    jjtThis.not = true;  }  )?r = relation(){    jjtThis.relation = r;  }  ){    return jjtThis;  }}OMRelation relation()#Relation:{  Token t;  OMArithmeticExpression ae;}{  (ae = arithmetic_expression(){    jjtThis.arithmeticExpression1 = ae;  }  (t = <REL_OP>ae = arithmetic_expression(){    jjtThis.relOp = t.image;    jjtThis.arithmeticExpression2 = ae;  }  )?){    return jjtThis;  }}OMArithmeticExpression arithmetic_expression()#ArithmeticExpression:{  Token t;  OMTerm tm;}{  (((t = <PLUS>{}//sign for the number? not sure at the moment. | t = <MINUS>{}| t = <DOT_PLUS>  | t = <DOT_MINUS>){    jjtThis.prefixOp = t.image;  }  )?tm = term(){    jjtThis.term = tm;  }  ((t = <PLUS>tm = term()  | t = <MINUS>tm = term()  | t = <DOT_PLUS>tm = term(){}| t = <DOT_MINUS>tm = term(){}){    jjtThis.addOps.add(t.image);    jjtThis.rhsTerms.add(tm);  }  )*){    return jjtThis;  }}OMTerm term()#Term:{  Token t;  OMFactor f;  double value;}{  (f = factor(){    jjtThis.factor = f;  }  ((t = <TIMES>f = factor(){  }  | t = <DIVIDE>f = factor(){  }  | t = <DOT_TIMES>f = factor(){}| t = <DOT_DIVIDE>f = factor(){}){    jjtThis.mulOps.add(t.image);    jjtThis.rhsFactors.add(f);  }  )*){    return jjtThis;  }}OMFactor factor()#Factor:{  Token t;  OMPrimary p1;  OMPrimary p2;}{  (p1 = primary(){    jjtThis.primary = p1;  }  ((t = "^"{    jjtThis.op = t.image;  }  | t = ".^"{    jjtThis.op = t.image;  }  )p2 = primary(){    jjtThis.rhsPrimary = p2;  }  )?){    return jjtThis;  }}OMPrimary primary()#Primary:{  Token t = null;  OMExpression[]exps;}{  ((t = <UNSIGNED_NUMBER>{  }  | t = <UNSIGNED_INTEGER>{  }  | t = <STRING>{    jjtThis.escimg = true;  }  | t = <FALSE>  | t = <TRUE>  | <END>){    if (t != null){      // 09 Oct 1 Lei TingString s = t.image;      if (jjtThis.escimg){        s = t.image.substring(1, t.image.length()-1);      }      jjtThis.image = s;    }  }  | LOOKAHEAD(name()"(")jjtThis.funcName = name()jjtThis.funcCallArgs = function_call_args()  | jjtThis.componentRef = component_reference()  | "("jjtThis.outputExpressionList = output_expression_list()")"  | "["exps = expression_list(){    jjtThis.expressionLists.add(Arrays.asList(exps));  }  (";"exps = expression_list(){    jjtThis.expressionLists.add(Arrays.asList(exps));  }  )*"]"  | "{"jjtThis.funcArgs = function_arguments()"}"  | "initial""("")"{    jjtThis.initial = true;  }  | "terminal""("")"{    jjtThis.terminal = true;  }  ){    return jjtThis;  }}String name():{  Token t;  StringBuilder sb = new StringBuilder();  String n;}{  t = <IDENT>{    n = t.image;    sb.append(n);  }  (LOOKAHEAD(2)"."n = name(){    sb.append("."+n);  }  )?{    return sb.toString();  }}OMComponentRef component_reference()#ComponentRef:{  Token t;  OMComponentRef cr;}{  (t = <IDENT>{    jjtThis.name = t.image;  }  (jjtThis.arraySubscripts = array_subscripts())?("."cr = component_reference(){    jjtThis.next = cr;  }  )?){    return jjtThis;  }}OMFunctionCallArgs function_call_args()#FunctionCallArgs:{}{  ("("(jjtThis.funcArgs = function_arguments())?")"){    return jjtThis;  }}OMFunctionArguments function_arguments()#FunctionArguments:{}{  (LOOKAHEAD(named_arguments())jjtThis.namedArguments = named_arguments()  | (jjtThis.expression = expression()(","jjtThis.next = function_arguments()  | <FOR>jjtThis.forIndices = for_indices())?)){    return jjtThis;  }}OMNamedArgument[]named_arguments():{  OMNamedArgument na;  OMNamedArgument[]nas;  List<OMNamedArgument>list = new LinkedList<OMNamedArgument>();}{  (na = named_argument(){    list.add(na);  }  (","nas = named_arguments(){    list.addAll(Arrays.asList(nas));  }  )?){    return list.toArray(new OMNamedArgument[0]);  }}OMNamedArgument named_argument()#NamedArgument:{  Token t;}{  (t = <IDENT>{    jjtThis.name = t.image;  }  "="jjtThis.expression = expression()){    return jjtThis;  }}OMExpression[]output_expression_list():{  OMExpression exp;  List<OMExpression>list = new LinkedList<OMExpression>();}{  ((exp = expression(){    list.add(exp);  }  )?(","exp = expression(){    list.add(exp);  }  )*){    return list.toArray(new OMExpression[0]);  }}OMExpression[]expression_list():{  OMExpression exp;  List<OMExpression>expList = new LinkedList<OMExpression>();}{  (exp = expression(){    expList.add(exp);  }  (","exp = expression(){    expList.add(exp);  }  )*){    return expList.toArray(new OMExpression[0]);  }}OMSubscript[]array_subscripts():{  OMSubscript s;  List<OMSubscript>list = new LinkedList<OMSubscript>();}{  ("["s = subscript(){    list.add(s);  }  (","s = subscript(){    list.add(s);  }  )*"]"){    return list.toArray(new OMSubscript[0]);  }}OMSubscript subscript()#Subscript:{}{  (":"{    jjtThis.sep = true;  }  | jjtThis.expression = expression()){    return jjtThis;  }}OMComment comment()#Comment:{}{  (jjtThis.string = string_comment()(jjtThis.annotation = annotation())?){    return jjtThis;  }}String string_comment():{  Token t;  StringBuilder sb = new StringBuilder();}{  (t = <STRING>{    sb.append(t.image.substring(1, t.image.length()-1));  }  ("+"t = <STRING>{    sb.append(t.image.substring(1, t.image.length()-1));  }  )*)?{    return sb.toString();  }}OMAnnotation annotation()#Annotation:{}{  (<ANNOTATION>jjtThis.classModification = class_modification()){    return jjtThis;  }}