/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\Modelica.jj */
/*@egen*/options{  STATIC = false;                                                                                }PARSER_BEGIN(ModelicaParser)package com.infoscient.proteus.modelica.parser;import java.util.List;import java.util.LinkedList;import java.util.Arrays;public class ModelicaParser/*@bgen(jjtree)*/implements ModelicaParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTModelicaParserState jjtree = new JJTModelicaParserState();

/*@egen*/  public static void main(String[]args)throws ParseException, TokenMgrError{    ModelicaParser parser = new ModelicaParser(System.in);    SimpleNode root = parser.stored_definition();    root.dump("");  }}PARSER_END(ModelicaParser)SKIP:{  " "  | "\t"  | "\n"  | "\r"  | <"//"(~["\n", "\r"])*("\n"  | "\r"  | "\r\n")>  | <"/*"(~["*"])*"*"("*"  | ~["*", "/"](~["*"])*"*")*"/">}TOKEN:{  <ALGORITHM:"algorithm">  | <AND:"and">  | <ANNOTATION:"annotation">  /*	| <ASSERT: "assert"> assert can also appear as a function, making it a keyword breaks it */| <BLOCK:"block">  | <BREAK:"break">  | <CLASS:"class">  | <CONNECT:"connect">  | <CONNECTOR:"connector">  | <CONSTANT:"constant">  | <CONSTRAINEDBY:"constrainedby">  /*	| <DER: "der"> der can also appear as a function, making it a keyword breaks it */| <DISCRETE:"discrete">  | <EACH:"each">  | <ELSE:"else">  | <ELSEIF:"elseif">  | <ELSEWHEN:"elsewhen">  | <ENCAPSULATED:"encapsulated">  | <END:"end">  | <ENUMERATION:"enumeration">  | <EQUATION:"equation">  | <EXPANDABLE:"expandable">  | <EXTENDS:"extends">  | <EXTERNAL:"external">  | <FALSE:"false">  | <FINAL:"final">  | <FLOW:"flow">  | <FOR:"for">  | <FUNCTION:"function">  | <IF:"if">  | <IMPORT:"import">  | <IN:"in">  | <INITIAL:"initial">  /* initial can also appear as a function, making it a keyword breaks it */| <INNER:"inner">  | <INPUT:"input">  | <LOOP:"loop">  | <MODEL:"model">  | <NOT:"not">  | <OR:"or">  | <OUTER:"outer">  | <OUTPUT:"output">  | <PACKAGE:"package">  | <PARAMETER:"parameter">  | <PARTIAL:"partial">  | <PROTECTED:"protected">  | <PUBLIC:"public">  | <RECORD:"record">  | <REDECLARE:"redeclare">  | <REPLACEABLE:"replaceable">  | <RETURN:"return">  | <STREAM:"stream">  | <THEN:"then">  | <TRUE:"true">  | <TYPE:"type">  | <WHEN:"when">  | <WHILE:"while">  | <WITHIN:"within">}TOKEN:{  <REL_OP:"<"  | "<="  | ">"  | ">="  | "=="  | "<>">  | <PLUS:"+">  | <MINUS:"-">  | <DOT_PLUS:".+">  | <DOT_MINUS:".-">  | <ADD_OP:"+"  | "-"  | ".+"  | ".-">  | <DOT_TIMES:".*">  | <TIMES:"*">  | <DIVIDE:"/">  | <DOT_DIVIDE:"./">  | <MUL_OP:<TIMES>  | <DIVIDE>  | <DOT_TIMES>  | <DOT_DIVIDE>>}TOKEN:{  <IDENT:<NONDIGIT>(<NONDIGIT> | <DIGIT>)* | <Q_IDENT>>  | <#Q_IDENT:"'"(<Q_CHAR>  | <S_ESCAPE>)+"'">  | <#NONDIGIT:["_", "a"-"z", "A"-"Z"]>  | <STRING:"\""(<S_CHAR>  | <S_ESCAPE>)*"\"">  | <#S_CHAR:~["\"", "\\"]>  | <#Q_CHAR:~["'", "\\"]>  | <#S_ESCAPE:"\\'"  | "\\\""  | "\\?"  | "\\\\"  | "\\a"  | "\\b"  | "\\f"  | "\\n"  | "\\r"  | "\\t"  | "\\v">  | <#DIGIT:["0"-"9"]>  | <UNSIGNED_INTEGER:(<DIGIT>)+>  | <UNSIGNED_NUMBER:(<UNSIGNED_INTEGER>("."(<UNSIGNED_INTEGER>)?)?(("e"  | "E")("+"  | "-")?<UNSIGNED_INTEGER>)?)  | "."<UNSIGNED_INTEGER>(("e"  | "E")("+"  | "-")?<UNSIGNED_INTEGER>)?>//1 Nov, 2010 Change the Unsignd_number represention to support double number like ".454454"//	|<BOOL: "true"|"false">//	|<INTEGER: <UNSIGNED_INTEGER>>//	|<REAL: (<UNSIGNED_INTEGER>)?"."(<UNSIGNED_INTEGER>)?(("e" | "E") ("+" | "-")? <UNSIGNED_INTEGER>)?>}/********************************************************************************                       Stored Definition - Within********************************************************************************/OMStoredDefinition stored_definition()                 :{/*@bgen(jjtree) StoredDefinition */
  OMStoredDefinition jjtn000 = new OMStoredDefinition(JJTSTOREDDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  boolean final_ = false;  String s;  OMClassDefinition clsdef;}{/*@bgen(jjtree) StoredDefinition */
  try {
/*@egen*/  ((<WITHIN>{    jjtn000.within = true;  }  (s = name(){    jjtn000.name = s;  }  )?";")?((<FINAL>{    final_ = true;  }  )?clsdef = class_definition(){    clsdef.final_ = final_;    jjtn000.classDefinitions.add(clsdef);  }  ";")*)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/********************************************************************************                             Class Definition********************************************************************************/OMClassDefinition class_definition()                :{/*@bgen(jjtree) ClassDefinition */
  OMClassDefinition jjtn000 = new OMClassDefinition(JJTCLASSDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token opt = null, t;}{/*@bgen(jjtree) ClassDefinition */
  try {
/*@egen*/  (<ENCAPSULATED>{    jjtn000.encapsulated = true;  }  )?(<PARTIAL>{    jjtn000.partial = true;  }  )?(t = <CLASS>  | t = <MODEL>  | t = <RECORD>  | t = <BLOCK>  | (opt = <EXPANDABLE>)?t = <CONNECTOR>  | t = <TYPE>  | t = <PACKAGE>  | t = <FUNCTION>){    jjtn000.restriction = (opt != null?opt.image:"")+t.image;  }  jjtn000.classSpecifier = class_specifier()/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMClassSpecifier class_specifier()               :{/*@bgen(jjtree) ClassSpecifier */
  OMClassSpecifier jjtn000 = new OMClassSpecifier(JJTCLASSSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) ClassSpecifier */
  try {
/*@egen*/  (LOOKAHEAD(2)t = <IDENT>{    jjtn000.name = t.image;  }  jjtn000.description = string_comment()jjtn000.composition = composition()<END><IDENT>{    jjtn000.endTag = true;  	jjtn000.selection = 0;  }  | LOOKAHEAD(3)t = <IDENT>{    jjtn000.name = t.image;  	jjtn000.selection = 1;  }  "="jjtn000.typePrefix =base_prefix()jjtn000.refName=name()(jjtn000.arraySubs=array_subscripts())?(jjtn000.classModification = class_modification())?jjtn000.comment = comment()  | LOOKAHEAD(3)t = <IDENT>{  	jjtn000.selection = 2;    jjtn000.name = t.image;   }  "="<ENUMERATION>"("((jjtn000.omEnumlist=enum_list()  | ":"{jjtn000.allTag = true;}))?")"jjtn000.comment =comment()  | t = <IDENT>{  	jjtn000.selection = 3;    jjtn000.name = t.image;  }  "=""der""("jjtn000.refName = name()","<IDENT>(","<IDENT>)*")"jjtn000.comment = comment()  | <EXTENDS>{  	jjtn000.selection = 4;    jjtn000.extends_ = true;   }  t = <IDENT>{    jjtn000.name = t.image;  }  (jjtn000.classModification = class_modification())?jjtn000.description = string_comment()jjtn000.composition = composition()<END><IDENT>{    jjtn000.endTag = true;  }  )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMTypePrefix base_prefix():{  OMTypePrefix t;}{  t = type_prefix(){    return t;  }}OMEnumList enum_list()         :{/*@bgen(jjtree) EnumList */
  OMEnumList jjtn000 = new OMEnumList(JJTENUMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMEnumLiteral el;}{/*@bgen(jjtree) EnumList */
  try {
/*@egen*/  (el = enumeration_literal(){    jjtn000.enumList.add(el);  }  (","el = enumeration_literal(){    jjtn000.enumList.add(el);  }  )*)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMEnumLiteral enumeration_literal()            :{/*@bgen(jjtree) EnumLiteral */
  OMEnumLiteral jjtn000 = new OMEnumLiteral(JJTENUMLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) EnumLiteral */
  try {
/*@egen*/  (t = <IDENT>{    jjtn000.name = t.image;  }  jjtn000.comment = comment())/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMComposition composition()            :{/*@bgen(jjtree) Composition */
 OMComposition jjtn000 = new OMComposition(JJTCOMPOSITION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;  OMElementList el;  OMEquationSection es;  OMAlgorithmSection as;}{/*@bgen(jjtree) Composition */
  try {
/*@egen*/  (el = element_list(){    jjtn000.elementList = el;  }  (t = <PUBLIC>el = element_list(){    jjtn000.publicElementLists.add(el);  }  | t=<PROTECTED>el = element_list(){    jjtn000.protectedElementLists.add(el);  }  | LOOKAHEAD(2)es = equation_section(){    jjtn000.equationSections.add(es);  }  | as = algorithm_section(){    jjtn000.algorithmSections.add(as);  }  )*(<EXTERNAL>(language_specification())?(external_function_call())?(annotation())?";")?(jjtn000.annotation =annotation()";")?)/*@bgen(jjtree)*/
                                                                                                                                {
                                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                  jjtc000 = false;
                                                                                                                                }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String language_specification():{  Token t;}{  t = <STRING>{    return t.image.substring(1, t.image.length()-1);  }}OMExternalFuncCall external_function_call()                 :{/*@bgen(jjtree) ExternalFuncCall */
  OMExternalFuncCall jjtn000 = new OMExternalFuncCall(JJTEXTERNALFUNCCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) ExternalFuncCall */
  try {
/*@egen*/  ((LOOKAHEAD(2)jjtn000.componentRef = component_reference()"=")?t = <IDENT>{    jjtn000.funcName = t.image;  }  "("(jjtn000.expList = expression_list())?")")/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMElementList element_list()            :{/*@bgen(jjtree) ElementList */
  OMElementList jjtn000 = new OMElementList(JJTELEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMElement e;  OMAnnotation a;}{/*@bgen(jjtree) ElementList */
  try {
/*@egen*/  (e = element(){    jjtn000.elements.add(e);  }  ";"  | a = annotation(){    jjtn000.annotations.add(a);  }  ";")*/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMElement element()        :{/*@bgen(jjtree) Element */
  OMElement jjtn000 = new OMElement(JJTELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Element */
  try {
/*@egen*/  (jjtn000.importClause = import_clause()  | jjtn000.extendsClause = extends_clause()  | (<REDECLARE>{    jjtn000.redeclare = true;  }  )?(<FINAL>{    jjtn000.final_ = true;  }  )?(<INNER>{    jjtn000.inner = true;  }  )?(<OUTER>{    jjtn000.outer = true;  }  )?((jjtn000.classDefinition = class_definition()  | jjtn000.componentClause = component_clause())  | <REPLACEABLE>{    jjtn000.replaceable = true;  }  (jjtn000.classDefinition = class_definition()  | jjtn000.componentClause = component_clause())(jjtn000.constrainingClause = constraining_clause()jjtn000.comment = comment())?))/*@bgen(jjtree)*/
                                                                                                                                   {
                                                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                     jjtc000 = false;
                                                                                                                                   }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMImportClause import_clause()             :{/*@bgen(jjtree) ImportClause */
  OMImportClause jjtn000 = new OMImportClause(JJTIMPORTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  String alias;}{/*@bgen(jjtree) ImportClause */
  try {
/*@egen*/  (<IMPORT>(LOOKAHEAD(2)t = <IDENT>"="jjtn000.name = name(){    jjtn000.alias = t.image;  }  | jjtn000.name = name()(<DOT_TIMES>{    jjtn000.includeSub = true;  }  )?)jjtn000.comment = comment())/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/********************************************************************************                                  Extends********************************************************************************/OMExtendsClause extends_clause()              :{/*@bgen(jjtree) ExtendsClause */
  OMExtendsClause jjtn000 = new OMExtendsClause(JJTEXTENDSCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ExtendsClause */
  try {
/*@egen*/  (<EXTENDS>jjtn000.name = name()(jjtn000.classModification = class_modification())?(jjtn000.annotation = annotation())?)/*@bgen(jjtree)*/
                                                                                                                         {
                                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                                           jjtc000 = false;
                                                                                                                         }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMConstrainingClause constraining_clause()                   :{/*@bgen(jjtree) ConstrainingClause */
  OMConstrainingClause jjtn000 = new OMConstrainingClause(JJTCONSTRAININGCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConstrainingClause */
  try {
/*@egen*/  (<CONSTRAINEDBY>jjtn000.name = name()(jjtn000.classModification = class_modification())?)/*@bgen(jjtree)*/
                                                                                           {
                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                             jjtc000 = false;
                                                                                           }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/********************************************************************************                             Component Clause********************************************************************************/OMComponentClause component_clause()                :{/*@bgen(jjtree) ComponentClause */
  OMComponentClause jjtn000 = new OMComponentClause(JJTCOMPONENTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ComponentClause */
  try {
/*@egen*/  jjtn000.typePrefix = type_prefix()jjtn000.typeName = type_specifier()(jjtn000.arraySubscripts = array_subscripts())?jjtn000.componentList = component_list()/*@bgen(jjtree)*/
                                                                                                                                                              {
                                                                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                jjtc000 = false;
                                                                                                                                                              }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMTypePrefix type_prefix()           :{/*@bgen(jjtree) TypePrefix */
  OMTypePrefix jjtn000 = new OMTypePrefix(JJTTYPEPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TypePrefix */
try {
/*@egen*/  //11 Nov, 2010. Stream is new in Modelica library 3.1. (<FLOW>{    jjtn000.flow = true;  }  | <STREAM>{    jjtn000.stream = true;  }  )?(<DISCRETE>{    jjtn000.variability = "discrete";  }  | <PARAMETER>{    jjtn000.variability = "parameter";  }  | <CONSTANT>{    jjtn000.variability = "constant";  }  )?(<INPUT>{    jjtn000.causality = "input";  }  | <OUTPUT>{    jjtn000.causality = "output";  }  )?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/}String type_specifier():{  String n;}{  n = name(){    return n;  }}OMComponentList component_list()              :{/*@bgen(jjtree) ComponentList */
  OMComponentList jjtn000 = new OMComponentList(JJTCOMPONENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMComponentDecl cd;}{/*@bgen(jjtree) ComponentList */
  try {
/*@egen*/  (cd = component_declaration(){    jjtn000.componentDecls.add(cd);  }  (","cd = component_declaration(){    jjtn000.componentDecls.add(cd);  }  )*)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMComponentDecl component_declaration()              :{/*@bgen(jjtree) ComponentDecl */
  OMComponentDecl jjtn000 = new OMComponentDecl(JJTCOMPONENTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ComponentDecl */
  try {
/*@egen*/  (jjtn000.decl = declaration()(jjtn000.condAttr = conditional_attribute())?jjtn000.comment = comment())/*@bgen(jjtree)*/
                                                                                                        {
                                                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                                                          jjtc000 = false;
                                                                                                        }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMCondAttr conditional_attribute()         :{/*@bgen(jjtree) CondAttr */
  OMCondAttr jjtn000 = new OMCondAttr(JJTCONDATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CondAttr */
  try {
/*@egen*/  (<IF>jjtn000.expression = expression())/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMDeclaration declaration()            :{/*@bgen(jjtree) Declaration */
  OMDeclaration jjtn000 = new OMDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Declaration */
  try {
/*@egen*/  (t = <IDENT>{    jjtn000.name = t.image;  }  (jjtn000.arraySubscripts = array_subscripts())?(jjtn000.modification = modification())?)/*@bgen(jjtree)*/
                                                                                          {
                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                            jjtc000 = false;
                                                                                          }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/********************************************************************************                               Modification********************************************************************************/OMModification modification()             :{/*@bgen(jjtree) Modification */
  OMModification jjtn000 = new OMModification(JJTMODIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Modification */
  try {
/*@egen*/  (jjtn000.classModification = class_modification()("="{    jjtn000.eqType = "=";  }  jjtn000.expression = expression())?  | "="{    jjtn000.eqType = "=";  }  jjtn000.expression = expression()  | ":="{    jjtn000.eqType = ":=";  }  jjtn000.expression = expression())/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMClassModification class_modification()                  :{/*@bgen(jjtree) ClassModification */
  OMClassModification jjtn000 = new OMClassModification(JJTCLASSMODIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ClassModification */
  try {
/*@egen*/  "("(jjtn000.argList = argument_list())?")"/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMArgumentList argument_list()             :{/*@bgen(jjtree) ArgumentList */
  OMArgumentList jjtn000 = new OMArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMArgument arg;}{/*@bgen(jjtree) ArgumentList */
  try {
/*@egen*/  (arg = argument(){    jjtn000.argList.add(arg);  }  (","arg = argument(){    jjtn000.argList.add(arg);  }  )*)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMArgument argument()         :{/*@bgen(jjtree) Argument */
  OMArgument jjtn000 = new OMArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Argument */
  try {
/*@egen*/  (jjtn000.elementModificationOrReplaceable = element_modification_or_replaceable()  | jjtn000.elementRedeclaration = element_redeclaration())/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMElementModificationOrReplaceable element_modification_or_replaceable()                                 :{/*@bgen(jjtree) ElementModificationOrReplaceable */
  OMElementModificationOrReplaceable jjtn000 = new OMElementModificationOrReplaceable(JJTELEMENTMODIFICATIONORREPLACEABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ElementModificationOrReplaceable */
  try {
/*@egen*/  ((<EACH>{    jjtn000.each = true;  }  )?(<FINAL>{    jjtn000.final_ = true;  }  )?(jjtn000.elementModification = element_modification()  | jjtn000.elementReplaceable = element_replaceable()))/*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
                                                        }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMElementModification element_modification()                    :{/*@bgen(jjtree) ElementModification */
  OMElementModification jjtn000 = new OMElementModification(JJTELEMENTMODIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ElementModification */
  try {
/*@egen*/  (jjtn000.componentRef = component_reference()(jjtn000.modification = modification())?jjtn000.stringComment = string_comment())/*@bgen(jjtree)*/
                                                                                                                                {
                                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                  jjtc000 = false;
                                                                                                                                }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMElementRedeclaration element_redeclaration()                     :{/*@bgen(jjtree) ElementRedeclaration */
  OMElementRedeclaration jjtn000 = new OMElementRedeclaration(JJTELEMENTREDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ElementRedeclaration */
  try {
/*@egen*/  (<REDECLARE>(<EACH>{    jjtn000.each = true;  }  )?(<FINAL>{    jjtn000.final_ = true;  }  )?((jjtn000.classDefinition = class_definition()  | jjtn000.componentClause1 = component_clause1())  | jjtn000.elementReplaceable = element_replaceable()))/*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn000, true);
                                                          jjtc000 = false;
                                                        }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMElementReplaceable element_replaceable()                   :{/*@bgen(jjtree) ElementReplaceable */
  OMElementReplaceable jjtn000 = new OMElementReplaceable(JJTELEMENTREPLACEABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ElementReplaceable */
  try {
/*@egen*/  (<REPLACEABLE>(jjtn000.classDefinition = class_definition()  | jjtn000.componentClause1 = component_clause1())(jjtn000.constrainingClause = constraining_clause())?)/*@bgen(jjtree)*/
                                                                                                         {
                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                           jjtc000 = false;
                                                                                                         }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMComponentClause1 component_clause1()                 :{/*@bgen(jjtree) ComponentClause1 */
  OMComponentClause1 jjtn000 = new OMComponentClause1(JJTCOMPONENTCLAUSE1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ComponentClause1 */
  try {
/*@egen*/  (jjtn000.typePrefix = type_prefix()jjtn000.typeName = type_specifier()jjtn000.componentDecl1 = component_declaration1())/*@bgen(jjtree)*/
                                                                                                                          {
                                                                                                                            jjtree.closeNodeScope(jjtn000, true);
                                                                                                                            jjtc000 = false;
                                                                                                                          }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMComponentDecl1 component_declaration1()               :{/*@bgen(jjtree) ComponentDecl1 */
  OMComponentDecl1 jjtn000 = new OMComponentDecl1(JJTCOMPONENTDECL1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ComponentDecl1 */
  try {
/*@egen*/  (jjtn000.decl = declaration()jjtn000.comment = comment())/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/********************************************************************************                                 Equations********************************************************************************/OMEquationSection equation_section()                :{/*@bgen(jjtree) EquationSection */
  OMEquationSection jjtn000 = new OMEquationSection(JJTEQUATIONSECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMEquation e;  OMAnnotation a;}{/*@bgen(jjtree) EquationSection */
  try {
/*@egen*/  (("initial"{    jjtn000.initial = true;  }  )?<EQUATION>(LOOKAHEAD(equation()  | <ANNOTATION>)(e = equation(){    jjtn000.equations.add(e);  }  ";"  | a = annotation(){    jjtn000.annotations.add(a);  }  ";"  ))*)/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMAlgorithmSection algorithm_section()                 :{/*@bgen(jjtree) AlgorithmSection */
  OMAlgorithmSection jjtn000 = new OMAlgorithmSection(JJTALGORITHMSECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMStatement s;  OMAnnotation a;}{/*@bgen(jjtree) AlgorithmSection */
  try {
/*@egen*/  (("initial"{    jjtn000.initial = true;  }  )?<ALGORITHM>(s = statement(){    jjtn000.statements.add(s);  }  ";"  | a = annotation(){    jjtn000.annotations.add(a);  }  ";")*)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMEquation equation()         :{/*@bgen(jjtree) Equation */
  OMEquation jjtn000 = new OMEquation(JJTEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Equation */
  try {
/*@egen*/  (LOOKAHEAD(simple_expression()"=")jjtn000.lhsExpression = simple_expression()"="jjtn000.rhsExpression = expression()  | jjtn000.ifEquation = if_equation()  | jjtn000.forEquation = for_equation()  | jjtn000.connectClause = connect_clause()  | jjtn000.whenEquation = when_equation()  //		| t = <IDENT> { jjtThis.funcName = t.image; } jjtThis.funcCallArgs = function_call_args()// 09 Oct 1 Lei Ting| jjtn000.componentRef = component_reference()jjtn000.funcCallArgs = function_call_args())jjtn000.comment = comment()/*@bgen(jjtree)*/
                                                                                                                     {
                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                       jjtc000 = false;
                                                                                                                     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMStatement statement()          :{/*@bgen(jjtree) Statement */
  OMStatement jjtn000 = new OMStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Statement */
  try {
/*@egen*/  (jjtn000.componentRef = component_reference()(":="jjtn000.expression = expression()  | jjtn000.funcCallArgs = function_call_args())  | "("jjtn000.outputExpressionList = output_expression_list()")"":="jjtn000.componentRef = component_reference()jjtn000.funcCallArgs = function_call_args()  | <BREAK>{    jjtn000.break_ = true;  }  | <RETURN>{    jjtn000.return_ = true;  }  | jjtn000.ifStatement = if_statement()  | jjtn000.forStatement = for_statement()  | jjtn000.whileStatement = while_statement()  | jjtn000.whenStatement = when_statement())jjtn000.comment = comment()/*@bgen(jjtree)*/
                                                                        {
                                                                          jjtree.closeNodeScope(jjtn000, true);
                                                                          jjtc000 = false;
                                                                        }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMIfEquation if_equation()           :{/*@bgen(jjtree) IfEquation */
  OMIfEquation jjtn000 = new OMIfEquation(JJTIFEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMExpression exp;  OMEquation e;  List<OMEquation>list;}{/*@bgen(jjtree) IfEquation */
  try {
/*@egen*/  (<IF>exp = expression(){    jjtn000.ifExpression = exp;  }  <THEN>(LOOKAHEAD(2)e = equation(){    jjtn000.ifEquations.add(e);  }  ";")*(<ELSEIF>exp = expression(){    jjtn000.elseIfExpressions.add(exp);    jjtn000.elseIfEquationsList.add(list = new LinkedList<OMEquation>());  }  <THEN>(LOOKAHEAD(2)e = equation(){    list.add(e);  }  ";")*)*(<ELSE>{    jjtn000.else_ = true;  }  (LOOKAHEAD(2)e = equation(){    jjtn000.elseEquations.add(e);  }  ";")*)?<END><IF>)/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMIfStatement if_statement()            :{/*@bgen(jjtree) IfStatement */
  OMIfStatement jjtn000 = new OMIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMExpression exp;  OMStatement s;  List<OMStatement>list;}{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/  (<IF>exp = expression(){    jjtn000.ifExpression = exp;  }  <THEN>(s = statement(){    jjtn000.ifStatements.add(s);  }  ";")*(<ELSEIF>exp = expression(){    jjtn000.elseIfExpressions.add(exp);    jjtn000.elseIfStatementsList.add(list = new LinkedList<OMStatement>());  }  <THEN>(s = statement(){    list.add(s);  }  ";")*)*(<ELSE>{    jjtn000.else_ = true;  }  (s = statement(){    jjtn000.elseStatements.add(s);  }  ";")*)?<END><IF>)/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMForEquation for_equation()            :{/*@bgen(jjtree) ForEquation */
  OMForEquation jjtn000 = new OMForEquation(JJTFOREQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMEquation e;}{/*@bgen(jjtree) ForEquation */
  try {
/*@egen*/  (<FOR>jjtn000.forIndices = for_indices()<LOOP>(LOOKAHEAD(2)e = equation(){    jjtn000.equations.add(e);  }  ";")*<END><FOR>)/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMForStatement for_statement()             :{/*@bgen(jjtree) ForStatement */
  OMForStatement jjtn000 = new OMForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMStatement s;}{/*@bgen(jjtree) ForStatement */
  try {
/*@egen*/  (<FOR>jjtn000.forIndices = for_indices()<LOOP>(s = statement(){    jjtn000.statements.add(s);  }  ";")*<END><FOR>)/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMForIndices for_indices()           :{/*@bgen(jjtree) ForIndices */
  OMForIndices jjtn000 = new OMForIndices(JJTFORINDICES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMForIndex fi;}{/*@bgen(jjtree) ForIndices */
  try {
/*@egen*/  (fi = for_index(){    jjtn000.forIndices.add(fi);  }  (","fi = for_index(){    jjtn000.forIndices.add(fi);  }  )*)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMForIndex for_index()         :{/*@bgen(jjtree) ForIndex */
  OMForIndex jjtn000 = new OMForIndex(JJTFORINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  OMExpression exp;}{/*@bgen(jjtree) ForIndex */
  try {
/*@egen*/  (t = <IDENT>{    jjtn000.name = t.image;  }  (<IN>exp = expression(){    jjtn000.inExpression = exp;  }  )?)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMWhileStatement while_statement()               :{/*@bgen(jjtree) WhileStatement */
  OMWhileStatement jjtn000 = new OMWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMExpression exp;  OMStatement s;}{/*@bgen(jjtree) WhileStatement */
  try {
/*@egen*/  (<WHILE>exp = expression(){    jjtn000.whileExpression = exp;  }  <LOOP>(s = statement(){    jjtn000.statements.add(s);  }  ";")*<END><WHILE>)/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMWhenEquation when_equation()             :{/*@bgen(jjtree) WhenEquation */
  OMWhenEquation jjtn000 = new OMWhenEquation(JJTWHENEQUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMExpression exp;  OMEquation e;  List<OMEquation>list;}{/*@bgen(jjtree) WhenEquation */
  try {
/*@egen*/  (<WHEN>exp = expression(){    jjtn000.whenExpression = exp;  }  <THEN>(LOOKAHEAD(2)e = equation(){    jjtn000.whenEquations.add(e);  }  ";")*(<ELSEWHEN>exp = expression(){    jjtn000.elseWhenExpressions.add(exp);    jjtn000.elseWhenEquationsList.add(list = new LinkedList<OMEquation>());  }  <THEN>(LOOKAHEAD(2)e = equation(){    list.add(e);  }  ";")*)*<END><WHEN>)/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMWhenStatement when_statement()              :{/*@bgen(jjtree) WhenStatement */
  OMWhenStatement jjtn000 = new OMWhenStatement(JJTWHENSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMExpression exp;  OMStatement s;  List<OMStatement>list;}{/*@bgen(jjtree) WhenStatement */
  try {
/*@egen*/  (<WHEN>exp = expression(){    jjtn000.whenExpression = exp;  }  <THEN>(s = statement(){    jjtn000.whenStatements.add(s);  }  ";")*(<ELSEWHEN>exp = expression(){    jjtn000.elseWhenExpressions.add(exp);    jjtn000.elseWhenStatementsList.add(list = new LinkedList<OMStatement>());  }  <THEN>(s = statement(){    list.add(s);  }  ";")*)*<END><WHEN>)/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMConnectClause connect_clause()              :{/*@bgen(jjtree) ConnectClause */
  OMConnectClause jjtn000 = new OMConnectClause(JJTCONNECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ConnectClause */
  try {
/*@egen*/  (<CONNECT>"("jjtn000.src = component_reference()","jjtn000.dest = component_reference()")")/*@bgen(jjtree)*/
                                                                                             {
                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                               jjtc000 = false;
                                                                                             }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/********************************************************************************                                Expressions********************************************************************************/OMExpression expression()           :{/*@bgen(jjtree) Expression */
  OMExpression jjtn000 = new OMExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMExpression exp;}{/*@bgen(jjtree) Expression */
  try {
/*@egen*/  ((jjtn000.simpleExpression = simple_expression()  | <IF>exp = expression(){    jjtn000.ifCondition = exp;  }  <THEN>exp = expression(){    jjtn000.ifExpression = exp;  }  (<ELSEIF>exp = expression(){    jjtn000.elseIfConditions.add(exp);  }  <THEN>exp = expression(){    jjtn000.elseIfExpressions.add(exp);  }  )*<ELSE>exp = expression(){    jjtn000.elseExpression = exp;  }  ))/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMSimpleExpression simple_expression()                 :{/*@bgen(jjtree) SimpleExpression */
  OMSimpleExpression jjtn000 = new OMSimpleExpression(JJTSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMLogicalExpression le;}{/*@bgen(jjtree) SimpleExpression */
  try {
/*@egen*/  (le = logical_expression(){    jjtn000.logicalExpression = le;  }  (":"le = logical_expression(){    jjtn000.logicalExpression1 = le;  }  (":"le = logical_expression(){    jjtn000.logicalExpression2 = le;  }  )?)?)/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMLogicalExpression logical_expression()                  :{/*@bgen(jjtree) LogicalExpression */
  OMLogicalExpression jjtn000 = new OMLogicalExpression(JJTLOGICALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMLogicalTerm lt;}{/*@bgen(jjtree) LogicalExpression */
  try {
/*@egen*/  (lt = logical_term(){    jjtn000.logicalTerms.add(lt);  }  (<OR>lt = logical_term(){    jjtn000.logicalTerms.add(lt);  }  )*)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMLogicalTerm logical_term()            :{/*@bgen(jjtree) LogicalTerm */
  OMLogicalTerm jjtn000 = new OMLogicalTerm(JJTLOGICALTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMLogicalFactor lf;}{/*@bgen(jjtree) LogicalTerm */
  try {
/*@egen*/  (lf = logical_factor(){    jjtn000.logicalFactors.add(lf);  }  (<AND>lf = logical_factor(){    jjtn000.logicalFactors.add(lf);  }  )*)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMLogicalFactor logical_factor()              :{/*@bgen(jjtree) LogicalFactor */
  OMLogicalFactor jjtn000 = new OMLogicalFactor(JJTLOGICALFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  OMRelation r;}{/*@bgen(jjtree) LogicalFactor */
  try {
/*@egen*/  ((<NOT>{    jjtn000.not = true;  }  )?r = relation(){    jjtn000.relation = r;  }  )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMRelation relation()         :{/*@bgen(jjtree) Relation */
  OMRelation jjtn000 = new OMRelation(JJTRELATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  OMArithmeticExpression ae;}{/*@bgen(jjtree) Relation */
  try {
/*@egen*/  (ae = arithmetic_expression(){    jjtn000.arithmeticExpression1 = ae;  }  (t = <REL_OP>ae = arithmetic_expression(){    jjtn000.relOp = t.image;    jjtn000.arithmeticExpression2 = ae;  }  )?)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMArithmeticExpression arithmetic_expression()                     :{/*@bgen(jjtree) ArithmeticExpression */
  OMArithmeticExpression jjtn000 = new OMArithmeticExpression(JJTARITHMETICEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  OMTerm tm;}{/*@bgen(jjtree) ArithmeticExpression */
  try {
/*@egen*/  (((t = <PLUS>{}//sign for the number? not sure at the moment. | t = <MINUS>{}| t = <DOT_PLUS>  | t = <DOT_MINUS>){    jjtn000.prefixOp = t.image;  }  )?tm = term(){    jjtn000.term = tm;  }  ((t = <PLUS>tm = term()  | t = <MINUS>tm = term()  | t = <DOT_PLUS>tm = term(){}| t = <DOT_MINUS>tm = term(){}){    jjtn000.addOps.add(t.image);    jjtn000.rhsTerms.add(tm);  }  )*)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMTerm term()     :{/*@bgen(jjtree) Term */
  OMTerm jjtn000 = new OMTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  OMFactor f;  double value;}{/*@bgen(jjtree) Term */
  try {
/*@egen*/  (f = factor(){    jjtn000.factor = f;  }  ((t = <TIMES>f = factor(){  }  | t = <DIVIDE>f = factor(){  }  | t = <DOT_TIMES>f = factor(){}| t = <DOT_DIVIDE>f = factor(){}){    jjtn000.mulOps.add(t.image);    jjtn000.rhsFactors.add(f);  }  )*)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMFactor factor()       :{/*@bgen(jjtree) Factor */
  OMFactor jjtn000 = new OMFactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  OMPrimary p1;  OMPrimary p2;}{/*@bgen(jjtree) Factor */
  try {
/*@egen*/  (p1 = primary(){    jjtn000.primary = p1;  }  ((t = "^"{    jjtn000.op = t.image;  }  | t = ".^"{    jjtn000.op = t.image;  }  )p2 = primary(){    jjtn000.rhsPrimary = p2;  }  )?)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMPrimary primary()        :{/*@bgen(jjtree) Primary */
  OMPrimary jjtn000 = new OMPrimary(JJTPRIMARY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t = null;  OMExpression[]exps;}{/*@bgen(jjtree) Primary */
  try {
/*@egen*/  ((t = <UNSIGNED_NUMBER>{  }  | t = <UNSIGNED_INTEGER>{  }  | t = <STRING>{    jjtn000.escimg = true;  }  | t = <FALSE>  | t = <TRUE>  | <END>){    if (t != null){      // 09 Oct 1 Lei TingString s = t.image;      if (jjtn000.escimg){        s = t.image.substring(1, t.image.length()-1);      }      jjtn000.image = s;    }  }  | LOOKAHEAD(name()"(")jjtn000.funcName = name()jjtn000.funcCallArgs = function_call_args()  | jjtn000.componentRef = component_reference()  | "("jjtn000.outputExpressionList = output_expression_list()")"  | "["exps = expression_list(){    jjtn000.expressionLists.add(Arrays.asList(exps));  }  (";"exps = expression_list(){    jjtn000.expressionLists.add(Arrays.asList(exps));  }  )*"]"  | "{"jjtn000.funcArgs = function_arguments()"}"  | "initial""("")"{    jjtn000.initial = true;  }  | "terminal""("")"{    jjtn000.terminal = true;  }  )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String name():{  Token t;  StringBuilder sb = new StringBuilder();  String n;}{  t = <IDENT>{    n = t.image;    sb.append(n);  }  (LOOKAHEAD(2)"."n = name(){    sb.append("."+n);  }  )?{    return sb.toString();  }}OMComponentRef component_reference()             :{/*@bgen(jjtree) ComponentRef */
  OMComponentRef jjtn000 = new OMComponentRef(JJTCOMPONENTREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;  OMComponentRef cr;}{/*@bgen(jjtree) ComponentRef */
  try {
/*@egen*/  (t = <IDENT>{    jjtn000.name = t.image;  }  (jjtn000.arraySubscripts = array_subscripts())?("."cr = component_reference(){    jjtn000.next = cr;  }  )?)/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMFunctionCallArgs function_call_args()                 :{/*@bgen(jjtree) FunctionCallArgs */
  OMFunctionCallArgs jjtn000 = new OMFunctionCallArgs(JJTFUNCTIONCALLARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionCallArgs */
  try {
/*@egen*/  ("("(jjtn000.funcArgs = function_arguments())?")")/*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                    }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMFunctionArguments function_arguments()                  :{/*@bgen(jjtree) FunctionArguments */
  OMFunctionArguments jjtn000 = new OMFunctionArguments(JJTFUNCTIONARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FunctionArguments */
  try {
/*@egen*/  (LOOKAHEAD(named_arguments())jjtn000.namedArguments = named_arguments()  | (jjtn000.expression = expression()(","jjtn000.next = function_arguments()  | <FOR>jjtn000.forIndices = for_indices())?))/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                               }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMNamedArgument[]named_arguments():{  OMNamedArgument na;  OMNamedArgument[]nas;  List<OMNamedArgument>list = new LinkedList<OMNamedArgument>();}{  (na = named_argument(){    list.add(na);  }  (","nas = named_arguments(){    list.addAll(Arrays.asList(nas));  }  )?){    return list.toArray(new OMNamedArgument[0]);  }}OMNamedArgument named_argument()              :{/*@bgen(jjtree) NamedArgument */
  OMNamedArgument jjtn000 = new OMNamedArgument(JJTNAMEDARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) NamedArgument */
  try {
/*@egen*/  (t = <IDENT>{    jjtn000.name = t.image;  }  "="jjtn000.expression = expression())/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMExpression[]output_expression_list():{  OMExpression exp;  List<OMExpression>list = new LinkedList<OMExpression>();}{  ((exp = expression(){    list.add(exp);  }  )?(","exp = expression(){    list.add(exp);  }  )*){    return list.toArray(new OMExpression[0]);  }}OMExpression[]expression_list():{  OMExpression exp;  List<OMExpression>expList = new LinkedList<OMExpression>();}{  (exp = expression(){    expList.add(exp);  }  (","exp = expression(){    expList.add(exp);  }  )*){    return expList.toArray(new OMExpression[0]);  }}OMSubscript[]array_subscripts():{  OMSubscript s;  List<OMSubscript>list = new LinkedList<OMSubscript>();}{  ("["s = subscript(){    list.add(s);  }  (","s = subscript(){    list.add(s);  }  )*"]"){    return list.toArray(new OMSubscript[0]);  }}OMSubscript subscript()          :{/*@bgen(jjtree) Subscript */
  OMSubscript jjtn000 = new OMSubscript(JJTSUBSCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Subscript */
  try {
/*@egen*/  (":"{    jjtn000.sep = true;  }  | jjtn000.expression = expression())/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}OMComment comment()        :{/*@bgen(jjtree) Comment */
  OMComment jjtn000 = new OMComment(JJTCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Comment */
  try {
/*@egen*/  (jjtn000.string = string_comment()(jjtn000.annotation = annotation())?)/*@bgen(jjtree)*/
                                                                         {
                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
                                                                         }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}String string_comment():{  Token t;  StringBuilder sb = new StringBuilder();}{  (t = <STRING>{    sb.append(t.image.substring(1, t.image.length()-1));  }  ("+"t = <STRING>{    sb.append(t.image.substring(1, t.image.length()-1));  }  )*)?{    return sb.toString();  }}OMAnnotation annotation()           :{/*@bgen(jjtree) Annotation */
  OMAnnotation jjtn000 = new OMAnnotation(JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Annotation */
  try {
/*@egen*/  (<ANNOTATION>jjtn000.classModification = class_modification())/*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                }
/*@egen*/{    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}